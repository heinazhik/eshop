#### print("Updated src/app/page.tsx:")
// src/app/page.tsx
import Hero from '../components/Hero.tsx';
import ProductCard from '../components/ProductCard.tsx';
import Footer from '../components/Footer.tsx';
import { Product, ApiResponse } from 'types';
import Navbar from 'components/Navbar'; // Import Navbar

// Fetch featured products from the API
async function getFeaturedProducts(): Promise<ApiResponse<Product[]>> {
    try {
        // Fetch data from the API route
        const res = await fetch(
            `${process.env.NEXT_PUBLIC_API_URL}/api/featured-products`,
            { cache: 'no-store' } // Ensure fresh data on every request
        );

        // Check if the response is OK
        if (!res.ok) {
            throw new Error(`Failed to fetch featured products: ${res.statusText}`);
        }

        // Parse the JSON response
        const data = await res.json();

        // Return the data with no error
        return { data, error: null, loading: false };
    } catch (error: any) {
        // Handle errors and return an empty array
        console.error('Error fetching featured products:', error);
        return { data: [], error: "No featured products found", loading: false };
    }
}

// Home page component
export default async function Home() {
    // Fetch featured products
    const { data: products, error, loading } = await getFeaturedProducts();

    // Log the fetched products and errors for debugging
    console.log('Fetched products:', products);
    console.log('Error:', error);

    // Show a loading state while fetching data
    if (loading) {
        return <div>Loading featured products...</div>;
    }

    // Show an error message if fetching fails
    if (error) {
        return <div>Error loading products: {error}</div>;
    }

    // Render the page
    return (
        <div>
            {/* Navigation Bar */}
            <Navbar />

            {/* Hero section */}
            <Hero />

            {/* Featured Products section */}
            <section className="py-16 px-4 bg-secondary-100 dark:bg-secondary-800">
                <div className="container mx-auto">
                    <h2 className="text-3xl font-bold mb-8 text-text-light dark:text-text-dark">Featured Products</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {/* Map over the products and render a ProductCard for each */}
                        {products?.map((product: Product) => (
                            <ProductCard
                                key={product.product_id}
                                product={{
                                    product_id: product.product_id,
                                    name: product.name,
                                    description: product.description,
                                    price: product.price,
                                    image_url: product.image_url || '/placeholder.jpg',
                                    category: product.category,
                                    created_at: new Date(product.created_at),
                                }}
                            />
                        ))}
                    </div>
                </div>
            </section>

            {/* Footer section */}
            <Footer />
        </div>
    );
}
###### print("Updated src/components/Hero.tsx:")
// src/components/Hero.tsx
import Link from 'next/link';

const Hero = () => {
  return (
    <div className="bg-gradient-to-r from-primary-accent to-secondary-accent py-20 px-4 sm:px-6 lg:px-8">
      <div className="container mx-auto text-center">
        <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-text-light dark:text-text-dark mb-6">
          Discover the Latest Trends
        </h1>
        <p className="text-lg sm:text-xl text-text-light dark:text-text-dark mb-10">
          Explore our curated collection of high-quality products.
        </p>
        <Link
          href="/products"
          className="inline-flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-accent hover:bg-secondary-accent focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-accent transition-colors"
        >
          Shop Now
        </Link>
      </div>
    </div>
  );
};

export default Hero;
###### print("Updated src/components/Navbar.tsx:")
'use client';
import Link from 'next/link';
import { ShoppingCartIcon, UserCircleIcon } from '@heroicons/react/24/outline';
import { useState, useEffect } from 'react';

const Navbar = () => {
  const [cartItemCount, setCartItemCount] = useState(0);

  useEffect(() => {
    const fetchCartItemCount = async () => {
      try {
        const response = await fetch('/api/cart');
        if (response.ok) {
          const data = await response.json();
          // Safely access data.data and use reduce, defaulting to 0 if data or data.data is undefined
          setCartItemCount(data?.data?.reduce((acc: number, item: { quantity: number }) => acc + item.quantity, 0) || 0);
        } else {
          console.error('Failed to fetch cart items');
        }
      } catch (error) {
        console.error('Error fetching cart items:', error);
      }
    };

    fetchCartItemCount();
  }, []);

  return (
    <nav className="bg-background-light dark:bg-background-dark p-4 shadow-sm">
      <div className="container mx-auto flex justify-between items-center">
        <Link href="/" className="text-lg font-bold text-text-light dark:text-text-dark hover:text-primary-accent transition-colors">
          eShop
        </Link>
        <div className="flex space-x-6">
          <Link href="/about" className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors">
            About
          </Link>
          <Link href="/blog" className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors">
            Blog
          </Link>
          <Link href="/cart" className="relative text-text-light dark:text-text-dark hover:text-primary-accent transition-colors">
            <ShoppingCartIcon className="h-6 w-6"></ShoppingCartIcon>
            {cartItemCount > 0 && (
              <span className="absolute top-[-10px] right-[-10px] bg-primary-accent text-white rounded-full px-2 py-0 text-xs">
                {cartItemCount}
              </span>
            )}
          </Link>
          <Link href="/login" className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors">
            <UserCircleIcon className="h-6 w-6"></UserCircleIcon>
          </Link>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
####### print("Updated src/components/Footer.tsx:")
import Link from 'next/link';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFacebookF, faInstagram, faTwitter } from '@fortawesome/free-brands-svg-icons';

const Footer = () => {
  return (
    <footer className="bg-footer-light dark:bg-footer-dark py-12">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
          {/* Quick Links */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-text-light dark:text-text-dark">Quick Links</h3>
            <nav className="flex flex-col space-y-2">
              <Link 
                href="/about" 
                className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="About Us"
              >
                About
              </Link>
              <Link 
                href="/privacy" 
                 className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Privacy Policy"
              >
                Privacy Policy
              </Link>
              <Link 
                href="/terms" 
                 className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Terms of Service"
              >
                Terms of Service
              </Link>
                <Link 
                href="/contact" 
                 className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Contact Us"
              >
                Contact
              </Link>
            </nav>
          </div>

          {/* Social Media */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-text-light dark:text-text-dark">Follow Us</h3>
            <div className="flex space-x-4">
              <a 
                href="https://facebook.com" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Facebook"
              >
                <FontAwesomeIcon icon={faFacebookF} className="w-6 h-6" />
              </a>
              <a 
                href="https://instagram.com" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Instagram"
              >
                <FontAwesomeIcon icon={faInstagram} className="w-6 h-6" />
              </a>
              <a 
                href="https://twitter.com" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-text-light dark:text-text-dark hover:text-primary-accent transition-colors"
                aria-label="Twitter"
              >
                <FontAwesomeIcon icon={faTwitter} className="w-6 h-6" />
              </a>
            </div>
          </div>

          {/* Newsletter */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-text-light dark:text-text-dark">Newsletter</h3>
            <div className="flex flex-col space-y-4">
              <p className="text-text-light dark:text-text-dark">
                Subscribe to our newsletter for updates and offers
              </p>
              <Link
                href="/newsletter"
                className="bg-primary-accent text-white px-6 py-2 rounded-md hover:bg-secondary-accent transition-colors text-center"
                aria-label="Go to newsletter page"
              >
                Manage Newsletter
              </Link>
            </div>
          </div>
        </div>

        {/* Copyright */}
        <div className="border-t border-gray-200 dark:border-gray-700 pt-8 text-center">
          <p className="text-sm text-text-light dark:text-text-dark">
            © {new Date().getFullYear()} eShop. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
##### print("Updated src/components/ProductCard.tsx:")
import React from 'react';
import Link from 'next/link';
import { Product } from 'types';

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  // Ensure price is a number before using toFixed
  const price = typeof product.price === 'string' ? parseFloat(product.price) : product.price;

  return (
    <Link href={`/products/${product.product_id}`} key={product.product_id}>
      <div className="bg-card-light dark:bg-card-dark rounded-lg shadow-md overflow-hidden">
        <img
          src={product.image_url || '/placeholder.jpg'}
          alt={product.name}
          className="w-full h-56 object-cover"
        />
        <div className="p-4">
          <h3 className="text-lg font-semibold mb-2 text-text-light dark:text-text-dark">{product.name}</h3>
          <p className="text-gray-600 dark:text-gray-400">${price.toFixed(2)}</p>
          {/* You can add more details here if needed */}
        </div>
      </div>
    </Link>
  );
};

export default ProductCard;
##### print("Updated src/components/ProductGrid.tsx:")
import React, { useState, useEffect } from 'react';
import ProductCard from './ProductCard';
import { Product } from 'types';

interface ProductGridProps {
  products: Product[];
}

const ProductGrid: React.FC<ProductGridProps> = ({ products }) => {
  const [sortBy, setSortBy] = useState('');
  const [filteredProducts, setFilteredProducts] = useState<Product[]>(products);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  const categories = [
    ...new Set(products.map((product) => product.category)),
  ];

  useEffect(() => {
    let updatedProducts = products;

    if (selectedCategories.length > 0) {
      updatedProducts = products.filter((product) =>
        selectedCategories.includes(product.category)
      );
    }

    if (sortBy === 'price-asc') {
      updatedProducts.sort((a, b) => a.price - b.price);
    } else if (sortBy === 'price-desc') {
      updatedProducts.sort((a, b) => b.price - a.price);
    } else if (sortBy === 'newest') {
      updatedProducts.sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
    }

    setFilteredProducts(updatedProducts);
  }, [products, sortBy, selectedCategories]);

  const handleCategoryChange = (category: string) => {
    setSelectedCategories((prev) =>
      prev.includes(category)
        ? prev.filter((c) => c !== category)
        : [...prev, category]
    );
  };

  return (
    <div className="container mx-auto p-4">
      <div className="flex flex-wrap items-center justify-between mb-8">
        <h2 className="text-2xl font-bold text-text-light dark:text-text-dark">Products</h2>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            {categories.map((category) => (
              <label key={category} className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={selectedCategories.includes(category)}
                  onChange={() => handleCategoryChange(category)}
                  className="form-checkbox h-4 w-4 text-primary-accent"
                />
                <span className="text-text-light dark:text-text-dark">{category}</span>
              </label>
            ))}
          </div>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="bg-secondary-100 dark:bg-secondary-800 text-text-light dark:text-text-dark border border-gray-600 rounded-md px-3 py-2"
          >
            <option value="">Sort by</option>
            <option value="price-asc">Price: Low to High</option>
            <option value="price-desc">Price: High to Low</option>
            <option value="newest">Newest</option>
          </select>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredProducts.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default ProductGrid;
####### print("Updated src/app/api/featured-products/route.ts:")
// src/app/api/featured-products/route.ts
import { db } from '@/lib/db';
import { NextResponse } from 'next/server';
import { Product } from 'types';

export async function GET() {
    try {
        // Query to fetch 6 featured products
        const query = `
            SELECT 
                product_id,
                name,
                description,
                price,
                image_url,
                category,
                created_at,
                stock_quantity,
                featured
            FROM 
                products 
            WHERE 
                featured = TRUE 
            LIMIT 6;
        `;

        // Execute the query
        const result = await db.query(query);

        // Check if the query returned any rows
        if (!result || !result.rows || result.rows.length === 0) {
            console.error("No featured products found.");
            return NextResponse.json(
                { error: 'No featured products found.' }, 
                { status: 404 }
            );
        }

        // Convert price to a number for each product
        const products = result.rows.map((product: Product) => ({
            ...product,
            price: parseFloat(product.price), // Ensure price is a number
        }));

        // Return the products as JSON
        return NextResponse.json(products);
    } catch (error) {
        console.error('Error fetching featured products:', error);
        return NextResponse.json(
            { error: 'Failed to fetch featured products' }, 
            { status: 500 }
        );
    }
}
######## print("Updated tailwind.config.ts:")
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        'background-light': '#F7F9FC',
        'background-dark': '#121212',
        'primary-accent': '#4CAF50',
        'secondary-accent': '#FFC107',
        'text-light': '#2C2C2C',
        'text-dark': '#FFFFFF',
        'header-light': '#333333',
        'header-dark': '#EAEAEA',
        'link-light': '#007BFF',
        'link-dark': '#80BFFF',
        'card-light': '#FFFFFF',
        'card-dark': '#1E1E1E',
        'footer-light': '#F1F3F6',
        'footer-dark': '#181818',
        'secondary-100': '#F1F3F6',
        'secondary-800': '#1E1E1E'
      },
    },
  },
  plugins: [],
};

export default config;
