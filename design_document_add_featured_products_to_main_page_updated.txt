Here’s a comprehensive and updated technical design specification document for adding "6 featured products" to the main page of your Next.js e-commerce project. This document incorporates the feedback and improvements from the provided files and ensures seamless integration with the existing cart functionality.

✨ Technical Design Specification: Featured Products on Main Page ✨
1️⃣ Objective
Display 6 featured products on the main landing page (/).

Each product card will link to a dynamic product detail page (/product/[product_id]).

Include an "Add to Cart" button on the product detail page to add the product to the shopping cart.

Ensure seamless integration with the existing cart functionality.

2️⃣ Technologies
Next.js: For server-side rendering and routing.

TypeScript: For type safety and better code maintainability.

Tailwind CSS: For styling and responsive design.

PostgreSQL: For storing product and cart data.

Fetch API: For data fetching from the backend.

Existing API Endpoints: /api/cart, /api/orders, and /api/featured-products.

3️⃣ Database Schema
The products table already exists, but we need to add a featured column to identify featured products.

SQL to Add featured Column
sql
Copy
ALTER TABLE products ADD COLUMN featured BOOLEAN DEFAULT FALSE;

-- Example: Mark products 1-6 as featured
UPDATE products SET featured = TRUE WHERE product_id IN (1, 2, 3, 4, 5, 6);
Products Table Structure
sql
Copy
CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  category VARCHAR(255),
  price NUMERIC NOT NULL,
  stock_quantity INT DEFAULT 0,
  description TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  image_url TEXT,
  featured BOOLEAN DEFAULT FALSE
);
4️⃣ Backend API Routes
Fetch Featured Products
This route fetches the 6 featured products from the database.

typescript
Copy
// src/app/api/featured-products/route.ts
import { db } from '@/lib/db';
import { NextResponse } from 'next/server';

export async function GET() {
  try {
    const query = `
      SELECT * FROM products WHERE featured = TRUE LIMIT 6;
    `;
    const result = await db.query(query);

    // Ensure price is a number before returning
    const products = result.rows.map(product => ({
      ...product,
      price: parseFloat(product.price), // Convert price to number
    }));

    return NextResponse.json(products);
  } catch (error) {
    return NextResponse.json({ error: 'Failed to fetch featured products' }, { status: 500 });
  }
}
Add to Cart
This route adds a product to the user's cart.

typescript
Copy
// src/app/api/cart/add/route.ts
import { db } from '@/lib/db';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  const { product_id, quantity } = await request.json();

  try {
    // Check if the user has a pending order
    const pendingOrderQuery = `
      SELECT order_id FROM orders WHERE customer_id = $1 AND status = 'pending';
    `;
    const pendingOrder = await db.query(pendingOrderQuery, [customer_id]);

    let orderId;
    if (pendingOrder.rows.length === 0) {
      // Create a new pending order
      const createOrderQuery = `
        INSERT INTO orders (customer_id, status, total_amount) VALUES ($1, 'pending', 0) RETURNING order_id;
      `;
      const newOrder = await db.query(createOrderQuery, [customer_id]);
      orderId = newOrder.rows[0].order_id;
    } else {
      orderId = pendingOrder.rows[0].order_id;
    }

    // Add the product to the order_items table
    const addItemQuery = `
      INSERT INTO order_items (order_id, product_id, quantity, price)
      VALUES ($1, $2, $3, (SELECT price FROM products WHERE product_id = $2));
    `;
    await db.query(addItemQuery, [orderId, product_id, quantity]);

    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json({ error: 'Failed to add to cart' }, { status: 500 });
  }
}
5️⃣ Frontend Implementation
A. Landing Page (src/app/page.tsx)
Fetch featured products from /api/featured-products and render them using the ProductCard component.

typescript
Copy
// src/app/page.tsx
import Hero from '../components/Hero';
import ProductCard from '../components/ProductCard';
import Footer from '../components/Footer';
import { Product, ApiResponse } from '@/types';

async function getFeaturedProducts(): Promise<ApiResponse<Product[]>> {
  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/featured-products`, { cache: 'no-store' });
    if (!res.ok) {
      throw new Error('Failed to fetch featured products');
    }
    return await res.json();
  } catch (error: any) {
    return { data: [], error: error.message, loading: false };
  }
}

export default async function Home() {
  const { data: products, error, loading } = await getFeaturedProducts();

  if (loading) {
    return <div>Loading featured products...</div>;
  }

  if (error) {
    return <div>Error loading products: {error}</div>;
  }

  return (
    <div>
      <Hero />
      <section className="py-16 px-4 bg-secondary-100">
        <div className="container mx-auto">
          <h2 className="text-3xl font-bold mb-8">Featured Products</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {products.map((product) => (
              <ProductCard
                key={product.product_id}
                product={{
                  id: product.product_id,
                  name: product.name,
                  description: product.description,
                  price: product.price,
                  imageUrl: product.image_url || '/placeholder.jpg',
                  category: product.category,
                  createdAt: new Date(product.created_at),
                }}
              />
            ))}
          </div>
        </div>
      </section>
      <Footer />
    </div>
  );
}
B. Product Detail Page (src/app/product/[product_id]/page.tsx)
Fetch product details based on product_id and add an "Add to Cart" button.

typescript
Copy
// src/app/product/[product_id]/page.tsx
import { db } from '@/lib/db';
import { notFound } from 'next/navigation';
import { Product } from '@/types';
import { useRouter } from 'next/navigation';

async function getProduct(id: string): Promise<Product | null> {
  try {
    const query = `
      SELECT * FROM products WHERE product_id = $1;
    `;
    const result = await db.query(query, [id]);
    return result.rows[0] as Product;
  } catch (error) {
    console.error('Error fetching product:', error);
    return null;
  }
}

export default async function ProductDetailPage({ params }: { params: { product_id: string } }) {
  const product = await getProduct(params.product_id);
  const router = useRouter();

  if (!product) {
    notFound();
  }

  const handleAddToCart = async () => {
    try {
      const response = await fetch('/api/cart/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ product_id: product.product_id, quantity: 1 }),
      });
      if (response.ok) {
        router.push('/cart'); // Redirect to cart page
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
    }
  };

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-4xl font-bold">{product.name}</h1>
      <div className="flex flex-col md:flex-row gap-8">
        <img src={product.image_url || '/placeholder.jpg'} alt={product.name} className="w-full h-96 object-contain md:w-1/2" />
        <div className="md:w-1/2">
          <p className="text-green-600 text-2xl mt-2">${product.price.toFixed(2)}</p>
          <p className="mt-4">{product.description}</p>
          <button
            className="bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600 mt-6"
            onClick={handleAddToCart}
          >
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  );
}
6️⃣ UI/UX Considerations
Product Card: Display product image, name, price, and a link to the product detail page.

Product Detail Page: Large image, clear price, description, and an "Add to Cart" button.

Cart Page: Already implemented with functionality to view, update, and remove items.

Navbar: Add a cart icon with the number of items in the cart.

7️⃣ Testing
Verify fetching of featured products.

Test redirection to product pages.

Test the "Add to Cart" button functionality.

Ensure UI consistency across devices.

8️⃣ Future Enhancements
Implement a proper checkout flow with payment processing.

Add user authentication.

Improve search functionality.

Add pagination for product listings.

This updated design document ensures that the "Featured Products" section is fully integrated with the existing cart functionality and provides a seamless user experience. 
