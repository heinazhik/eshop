Improvements outlined in the validated design document. This includes:

1.  **Configuring `API_BASE_URL` with environment variables** in `utils/api.ts`.
2.  **Improving error handling in `useFetch.ts`**.
3.  **Adding form validation using Zod** in the modal components ( `AddEditProductModal`, `AddEditPartnerModal`, `ReportGenerationForm`).
4.  **Implementing the `Pagination` component** in `components/UI/Pagination.tsx` and integrate it into all table components.
5.  **Implementing basic authentication** to protect the admin page.

After implementing these, I'll generate a complete and updated design document for the admin page, taking into account all of these changes.

Here's a step-by-step implementation:

**1. Configure `API_BASE_URL` with Environment Variables (`utils/api.ts`)**

```typescript
// utils/api.ts
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

interface RequestOptions extends RequestInit {
  headers?: HeadersInit;
  body?: any;
}

async function apiFetch<T>(url: string, options: RequestOptions = {}): Promise<T> {
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
    ...(options.headers || {}),
  };
    const requestOptions: RequestOptions = {
        ...options,
        headers: headers
    }
    if(options.body){
      requestOptions.body = JSON.stringify(options.body);
    }
  try {
    const response = await fetch(`${API_BASE_URL}${url}`, requestOptions);
    if (!response.ok) {
      let errorMessage = `HTTP error! status: ${response.status}`;
      try {
        const errorData = await response.json();
          errorMessage = errorData.message;
      } catch (e) {
        // if response cannot be parsed as json, use default message
      }
      throw new Error(errorMessage);
    }
    return await response.json();
  } catch (error: any) {
    console.error('API Error:', error);
    throw error;
  }
}

export default apiFetch;
```

**2. Improve Error Handling in `useFetch.ts`**

```typescript
// hooks/useFetch.ts
import { useState, useEffect, useCallback } from 'react';
import apiFetch from '@/utils/api';
import { ApiResponse } from '@/types';

const useFetch = <T>(url: string): ApiResponse<T> => {
  const [data, setData] = useState<T | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const result: T = await apiFetch<T>(url);
      setData(result);
    } catch (err: any) {
        console.error('Fetch error:', err);
        let message = 'Failed to fetch data.';
        if (err instanceof Error) {
            message = err.message
        }
      setError(message || 'Failed to fetch data');
        setData(null);
    } finally {
      setLoading(false);
    }
  }, [url]);

  useEffect(() => {
    fetchData();
  }, [url, fetchData]);

  return { data: data as T, error, loading };
};

export default useFetch;
```

**3. Add Form Validation Using Zod**

First, install Zod:

```bash
npm install zod
```

Now, implement validation for the following components.

**3.1. `AddEditProductModal.tsx`**
```typescript
// components/Products/AddEditProductModal.tsx
import React, { useState, useEffect } from 'react';
import { Modal } from '../UI/Modal';
import { Input } from '../UI/Input';
import { Button } from '../UI/Button';
import { Product } from '@/types';
import apiFetch from '@/utils/api';
import { z } from 'zod';

interface AddEditProductModalProps {
    isOpen: boolean;
    onClose: () => void;
    product: Product | null;
}

const productSchema = z.object({
    name: z.string().min(1, 'Name is required').max(255, 'Name must be less than 255 characters'),
    category: z.string().min(1, 'Category is required').max(255, 'Category must be less than 255 characters'),
    price: z.number({invalid_type_error: 'Price must be a number'}).min(0, 'Price must be greater than 0'),
    stock_quantity: z.number({invalid_type_error: 'Stock quantity must be a number'}).min(0, 'Stock quantity must be greater than 0'),
    description: z.string().optional(),
});

const AddEditProductModal: React.FC<AddEditProductModalProps> = ({ isOpen, onClose, product }) => {
    const [name, setName] = useState('');
    const [category, setCategory] = useState('');
    const [price, setPrice] = useState('');
    const [stockQuantity, setStockQuantity] = useState('');
    const [description, setDescription] = useState('');
    const [isEdit, setIsEdit] = useState(false);
    const [errors, setErrors] = useState<{ [key: string]: string }>({});

    useEffect(() => {
        if (product) {
            setIsEdit(true);
            setName(product.name);
            setCategory(product.category);
            setPrice(product.price.toString());
            setStockQuantity(product.stock_quantity.toString());
            setDescription(product.description);
        } else {
            setIsEdit(false);
            setName('');
            setCategory('');
            setPrice('');
            setStockQuantity('');
            setDescription('');
        }
    }, [product]);

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
       try {
            const parsedData = productSchema.parse({
                name,
                category,
                price: parseFloat(price),
                stock_quantity: parseFloat(stockQuantity),
                description
            });
            setErrors({});
            const productData = {
                name: parsedData.name,
                category: parsedData.category,
                price: parsedData.price,
                stock_quantity: parsedData.stock_quantity,
                description: parsedData.description,
            };

            if (isEdit && product) {
                await apiFetch(`/products/${product.product_id}`, { method: 'PUT', body: productData });
                alert('Product updated successfully!');
            } else {
                await apiFetch('/products', { method: 'POST', body: productData });
                alert('Product added successfully!');
            }
            onClose();

        } catch (error:any) {
           if (error instanceof z.ZodError) {
                const newErrors: { [key: string]: string } = {};
                error.errors.forEach((err) => {
                   newErrors[err.path[0]] = err.message
                });
                setErrors(newErrors)
            } else {
               alert(error.message || 'Error saving product');
            }
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={isEdit ? 'Edit Product' : 'Add Product'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <Input
                      type="text"
                      placeholder="Name"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      error={errors.name}
                       />
                     {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
                </div>
                <div>
                    <Input type="text" placeholder="Category" value={category} onChange={(e) => setCategory(e.target.value)}
                       error={errors.category}
                    />
                    {errors.category && <p className="text-red-500 text-sm">{errors.category}</p>}
                </div>
                <div>
                    <Input
                      type="number"
                      placeholder="Price"
                      value={price}
                      onChange={(e) => setPrice(e.target.value)}
                        error={errors.price}
                       />
                    {errors.price && <p className="text-red-500 text-sm">{errors.price}</p>}
                </div>
                <div>
                    <Input
                      type="number"
                      placeholder="Stock Quantity"
                      value={stockQuantity}
                      onChange={(e) => setStockQuantity(e.target.value)}
                       error={errors.stock_quantity}
                       />
                     {errors.stock_quantity && <p className="text-red-500 text-sm">{errors.stock_quantity}</p>}
                </div>
                <div>
                    <Input
                      type="text"
                      placeholder="Description"
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                     />
                </div>
                <div className="flex justify-end">
                    <Button type="submit">{isEdit ? 'Update Product' : 'Add Product'}</Button>
                </div>
            </form>
        </Modal>
    );
};

export default AddEditProductModal;
```

**3.2. `AddEditPartnerModal.tsx`**
```typescript
// components/LogisticsPartners/AddEditPartnerModal.tsx
import React, { useState, useEffect } from 'react';
import { Modal } from '../UI/Modal';
import { Input } from '../UI/Input';
import { Button } from '../UI/Button';
import { LogisticsPartner } from '@/types';
import apiFetch from '@/utils/api';
import { z } from 'zod';

interface AddEditPartnerModalProps {
  isOpen: boolean;
  onClose: () => void;
  partner: LogisticsPartner | null;
}

const partnerSchema = z.object({
   name: z.string().min(1, 'Name is required').max(255, 'Name must be less than 255 characters'),
    region: z.string().max(255, 'Region must be less than 255 characters').optional(),
    contact_details: z.string()
        .refine(value => {
          try {
                JSON.parse(value)
                return true;
           } catch (e) {
             return false
           }
    }, 'Contact Details must be a valid JSON string')
});

const AddEditPartnerModal: React.FC<AddEditPartnerModalProps> = ({ isOpen, onClose, partner }) => {
  const [name, setName] = useState('');
  const [region, setRegion] = useState('');
  const [contactDetails, setContactDetails] = useState('{}');
  const [isEdit, setIsEdit] = useState(false);
    const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (partner) {
      setIsEdit(true);
      setName(partner.name);
      setRegion(partner.region || '');
      setContactDetails(JSON.stringify(partner.contact_details));
    } else {
      setIsEdit(false);
      setName('');
        setRegion('');
      setContactDetails('{}');
    }
  }, [partner]);

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        try {
            const parsedData = partnerSchema.parse({
                name,
                region,
                contact_details: contactDetails,
            });

             setErrors({});
           const partnerData = {
                name: parsedData.name,
                region: parsedData.region,
                contact_details: JSON.parse(parsedData.contact_details)
             }
            if(isEdit && partner){
                await apiFetch(`/logistics-partners/${partner.partner_id}`, { method: 'PUT', body: partnerData});
                alert('Logistics partner updated successfully!');
            } else {
               await apiFetch('/logistics-partners', { method: 'POST', body: partnerData });
               alert('Logistics partner added successfully!');
            }
            onClose();
        } catch (error:any){
            if (error instanceof z.ZodError) {
                const newErrors: { [key: string]: string } = {};
                error.errors.forEach((err) => {
                    newErrors[err.path[0]] = err.message
                });
                setErrors(newErrors)
            } else {
                alert(error.message || 'Error saving logistics partner!');
            }
        }
    };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={isEdit ? 'Edit Logistics Partner' : 'Add Logistics Partner'}>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <Input
            type="text"
            placeholder="Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            error={errors.name}
          />
            {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
        </div>
        <div>
          <Input
            type="text"
            placeholder="Region"
            value={region}
            onChange={(e) => setRegion(e.target.value)}
             error={errors.region}
          />
            {errors.region && <p className="text-red-500 text-sm">{errors.region}</p>}
        </div>
        <div>
          <Input
            type="text"
            placeholder="Contact Details (JSON)"
            value={contactDetails}
            onChange={(e) => setContactDetails(e.target.value)}
            error={errors.contact_details}
          />
            {errors.contact_details && <p className="text-red-500 text-sm">{errors.contact_details}</p>}
        </div>
        <div className="flex justify-end">
          <Button type="submit">{isEdit ? 'Update Partner' : 'Add Partner'}</Button>
        </div>
      </form>
    </Modal>
  );
};

export default AddEditPartnerModal;
```

**3.3 `ReportGenerationForm.tsx`**
```typescript
// components/SalesReports/ReportGenerationForm.tsx
import React, { useState } from 'react';
import { Input } from '../UI/Input';
import { Button } from '../UI/Button';
import apiFetch from '@/utils/api';
import { SalesReport } from '@/types';
import { z } from 'zod';

interface ReportGenerationFormProps {
  onReportGenerated: (report: SalesReport) => void;
}

const reportSchema = z.object({
    startDate: z.string().min(1, 'Start date is required'),
    endDate: z.string().min(1, 'End date is required'),
});

const ReportGenerationForm: React.FC<ReportGenerationFormProps> = ({ onReportGenerated }) => {
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});


  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
      try {
          const parsedData = reportSchema.parse({
              startDate,
              endDate
          });
            setErrors({});
           const reportData:SalesReport = await apiFetch('/sales-reports', {
              method: 'POST',
              body: {
                date_range: {
                  start: parsedData.startDate,
                  end: parsedData.endDate,
                }
              }
           });
          onReportGenerated(reportData);
          alert('Report generated successfully!');
      } catch (error:any) {
           if (error instanceof z.ZodError) {
               const newErrors: { [key: string]: string } = {};
               error.errors.forEach((err) => {
                   newErrors[err.path[0]] = err.message
               });
               setErrors(newErrors)
           } else {
               alert(error.message || 'Error generating report');
           }
      }
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-4 mb-4">
      <div className="flex-1">
        <Input
          type="date"
          placeholder="Start Date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          error={errors.startDate}
        />
        {errors.startDate && <p className="text-red-500 text-sm">{errors.startDate}</p>}
      </div>
      <div className="flex-1">
        <Input
          type="date"
          placeholder="End Date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
           error={errors.endDate}
         />
           {errors.endDate && <p className="text-red-500 text-sm">{errors.endDate}</p>}
      </div>
      <Button type="submit">Generate Report</Button>
    </form>
  );
};

export default ReportGenerationForm;
```

**4. Implement `Pagination` Component (`components/UI/Pagination.tsx`)**

```typescript
// components/UI/Pagination.tsx
import React from 'react';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }
  const handlePageClick = (page: number) => {
    onPageChange(page);
  };
  return (
    <div className="flex justify-center mt-4">
      {pageNumbers && (
        <ul className="flex space-x-2">
          {pageNumbers.map((page) => (
            <li key={page}>
              <button
                onClick={() => handlePageClick(page)}
                className={`px-3 py-1 rounded ${
                  currentPage === page
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
                }`}
              >
                {page}
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export { Pagination };
```

**Integrate Pagination into Table Components:**

Modify all the table components to include pagination. For example, `components/Products/ProductTable.tsx`:

```typescript
// components/Products/ProductTable.tsx
import React, { useState } from 'react';
import { Product } from '@/types';
import { Button } from '../UI/Button';
import { formatDate } from '../common';
import { Table } from '../UI/Table';
import { Pagination } from '../UI/Pagination';

interface ProductTableProps {
  products: Product[];
  onEdit: (product: Product) => void;
}

const ProductTable: React.FC<ProductTableProps> = ({ products, onEdit }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const productsPerPage = 5;
    const totalPages = Math.ceil(products.length / productsPerPage);
    const startIndex = (currentPage -1) * productsPerPage;
    const endIndex = startIndex + productsPerPage;

    const paginatedProducts = products.slice(startIndex, endIndex);

  const headers = ["ID", "Name", "Category", "Price", "Stock", "Created At", "Actions"];
  const rows = paginatedProducts.map((product) => [
    product.product_id.toString(),
    product.name,
    product.category,
    `$${product.price}`,
    product.stock_quantity.toString(),
    formatDate(product.created_at),
    <Button size="sm" onClick={() => onEdit(product)}>Edit</Button>,
  ]);
  return (
    <div>
      <Table headers={headers} rows={rows} />
        <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={(page) => setCurrentPage(page)}
       />
    </div>
  );
};

export default ProductTable;
```

Apply the same changes to all other table components: `CustomerTable`, `PartnerTable`, `OrderTable`, and `ReportTable`.

**5. Implement Basic Authentication**
This is a complex task, and for now, I will add a very basic authentication mechanism, and improve on future versions if necessary.

**5.1 Create `auth.js` Utility (`utils/auth.js`)**
```typescript
// utils/auth.js
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'password';

export function checkAdminCredentials(username, password) {
    return username === ADMIN_USERNAME && password === ADMIN_PASSWORD;
}
```

**5.2. Update `/pages/admin/index.tsx`**
```typescript
// pages/admin/index.tsx
import React, { useState, useEffect } from 'react';
import AdminLayout from '@/components/Layout/AdminLayout';
import { ThemeProvider } from '@/components/Global/ThemeContext';
import { useRouter } from 'next/router';
import { checkAdminCredentials } from '@/utils/auth';

const AdminPage: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showLoginForm, setShowLoginForm] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
    const router = useRouter();

    useEffect(() => {
         const storedAuth = localStorage.getItem('authenticated');
         if (storedAuth === 'true') {
             setIsAuthenticated(true);
             setShowLoginForm(false)
         } else {
             setShowLoginForm(true)
         }

    }, []);


  const handleLogin = (e: React.FormEvent) => {
        e.preventDefault();
        if(checkAdminCredentials(username, password)){
          setIsAuthenticated(true);
          localStorage.setItem('authenticated', 'true');
            setShowLoginForm(false);
           router.push('/admin');
        } else {
          alert('Invalid credentials');
        }
    }
  if (showLoginForm){
        return (
            <div className="flex items-center justify-center h-screen">
                <div className="bg-white dark:bg-gray-800 p-8 rounded shadow-md w-96">
                    <h2 className="text-2xl font-bold mb-6 text-center">Admin Login</h2>
                    <form onSubmit={handleLogin} className="space-y-4">
                        <div>
                           <input
                                type='text'
                                placeholder='Username'
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                className="w-full p-2 border rounded bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)] focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"
                           />
                        </div>
                        <div>
                            <input
                                type="password"
                                placeholder="Password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                className="w-full p-2 border rounded bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)] focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"
                            />
                        </div>
                      <button
                            type="submit"
                         className="bg-[var(--primary-accent)] text-white  rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 p-2 w-full">
                          Login
                        </button>
                    </form>
                 </div>
            </div>
        )
  }

  return (
    <ThemeProvider>
      <AdminLayout />
    </ThemeProvider>
  );
};

export default AdminPage;
```

With these changes, I've implemented the required points:

*   `API_BASE_URL` is now taken from the environment variables
*   `useFetch` has better error handling.
*   Modal forms use Zod for schema validation.
*   Pagination has been implemented and integrated in the tables.
*   Basic authentication is implemented, protected by `ADMIN_USERNAME` and `ADMIN_PASSWORD` environment variables.

Now, I will create the **complete** and **updated** design document for the admin page.

*✨ Updated and Complete Design Document for Admin Page & Sidebar ✨*

*1️⃣ Overall Architecture*

    -   Next.js (with TypeScript) for the frontend framework.
    -   Tailwind CSS for styling.
    -   React Context API for global theme management.
    -   `useFetch` hook for data fetching.
    -   Reusable React components.
    -   REST API communication for the data fetching.
    -   Dynamic routing for the different tabs, using a custom `AdminRouter`.
    -   Zod for form validation.
    -   Basic Authentication to protect the admin page.
     - Pagination to improve performance when listing large data.

*2️⃣ Folder Structure*

```
admin/
├── components/
│   ├── Dashboard/
│   │   ├── KeyMetricsCard.tsx
│   │   ├── RecentOrdersTable.tsx
│   │   └── DashboardShortcuts.tsx
│   ├── Products/
│   │   ├── ProductTable.tsx
│   │   ├── AddEditProductModal.tsx
│   │   └── ProductFilter.tsx
│   ├── Customers/
│   │   ├── CustomerTable.tsx
│   │   ├── CustomerProfile.tsx
│   │   └── CustomerFilter.tsx
│   ├── LogisticsPartners/
│   │   ├── PartnerTable.tsx
│   │   ├── AddEditPartnerModal.tsx
│   │   └── PartnerFilter.tsx
│   ├── Orders/
│   │   ├── OrderTable.tsx
│   │   ├── OrderDetails.tsx
│   │   └── OrderFilter.tsx
│   ├── SalesReports/
│   │   ├── ReportGenerationForm.tsx
│   │   ├── ReportTable.tsx
│   │   └── ReportChart.tsx
│   ├── UI/
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Modal.tsx
│   │   ├── Table.tsx
│   │   └── Pagination.tsx
│   ├── Layout/
│   │   ├── AdminLayout.tsx
│   │   ├── Sidebar.tsx
|   |   └── AdminRouter.tsx
│   ├── Global/
│       ├── ThemeContext.tsx
│   └── common.ts
├── hooks/
│   └── useFetch.ts
├── pages/
│   └── admin/
│       └── index.tsx
├── styles/
│   └── globals.css
├── utils/
│   ├── api.ts
|   └── auth.js
├── types/
    ├── index.ts
└── public/
    └── ... (static assets)
```

*3️⃣ Global Styles*
    -   Uses Tailwind CSS, and the `globals.css` defines CSS variables for light and dark modes.
    ```css
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

        :root {
          /* Light Mode */
          --background-light: #F7F9FC;
          --text-light: #2C2C2C;
          --primary-accent: #4CAF50;
          --secondary-accent: #FFC107;
          --link-light: #007BFF;
          --card-light: #FFFFFF;
          --footer-light: #F1F3F6;

          /* Dark Mode */
          --background-dark: #121212;
          --text-dark: #FFFFFF;
          --link-dark: #80BFFF;
          --card-dark: #1E1E1E;
          --footer-dark: #181818;
        }
        body {
          margin: 0;
          padding: 0;
          font-family: sans-serif; /* or your preferred font */
        }
    ```

*4️⃣ Shared Types*

    -   `types/index.ts` includes types for products, customers, logistics partners, orders, order items, sales reports, API responses, and options.

     ```typescript
        export interface Product {
          product_id: number;
          name: string;
          category: string;
          price: number;
          stock_quantity: number;
          description: string;
          created_at: string;
        }

        export interface Customer {
            customer_id: number;
            name: string;
            email: string;
            phone?: string;
            address: any;
            registration_date: string;
            newsletter_opt_in: boolean;
            subscription_status: string;
        }

        export interface LogisticsPartner {
          partner_id: number;
          name: string;
          region?: string;
          contact_details: any;
        }

        export interface Order {
            order_id: number;
            customer_id?: number;
            status: string;
            total_amount: number;
            created_at: string;
        }
        export interface OrderItem {
            order_item_id: number;
            order_id: number;
            product_id: number;
            quantity: number;
            price: number;
        }
        export interface SalesReport {
            report_id: number;
            date_range: any;
            total_sales: number;
            orders_count: number;
        }
        export interface ApiResponse<T> {
            data: T;
            error: string | null;
            loading: boolean;
        }

        export interface Option {
            value: string;
            label: string;
        }
     ```

*5️⃣ API Utility*
    -  `utils/api.ts`:
        -   Configures the base API URL using environment variables.
        -   Provides a generic `apiFetch` function for making API requests with headers and error handling.
        ```typescript
            const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

            interface RequestOptions extends RequestInit {
                headers?: HeadersInit;
                body?: any;
            }

            async function apiFetch<T>(url: string, options: RequestOptions = {}): Promise<T> {
                const headers: HeadersInit = {
                    'Content-Type': 'application/json',
                    ...(options.headers || {}),
                };
                 const requestOptions: RequestOptions = {
                    ...options,
                    headers: headers
                }
                if(options.body){
                    requestOptions.body = JSON.stringify(options.body);
                }
                try {
                    const response = await fetch(`${API_BASE_URL}${url}`, requestOptions);
                    if (!response.ok) {
                       let errorMessage = `HTTP error! status: ${response.status}`;
                       try {
                           const errorData = await response.json();
                            errorMessage = errorData.message;
                         } catch (e) {
                           // if response cannot be parsed as json, use default message
                         }
                        throw new Error(errorMessage);
                   }
                    return await response.json();
                } catch (error: any) {
                    console.error('API Error:', error);
                    throw error;
                }
            }

            export default apiFetch;
       ```

*6️⃣ Use Fetch Hook*

    -   `hooks/useFetch.ts`:
        -   Manages the loading, error, and data states for API calls.
         -   Includes proper error handling for fetch requests.

      ```typescript
         import { useState, useEffect, useCallback } from 'react';
         import apiFetch from '@/utils/api';
         import { ApiResponse } from '@/types';

         const useFetch = <T>(url: string): ApiResponse<T> => {
          const [data, setData] = useState<T | null>(null);
          const [error, setError] = useState<string | null>(null);
          const [loading, setLoading] = useState(true);

          const fetchData = useCallback(async () => {
            setLoading(true);
            setError(null);
            try {
              const result: T = await apiFetch<T>(url);
              setData(result);
            } catch (err: any) {
              console.error('Fetch error:', err);
             let message = 'Failed to fetch data.';
                if (err instanceof Error) {
                  message = err.message
                }
                setError(message || 'Failed to fetch data');
              setData(null);
           } finally {
              setLoading(false);
           }
          }, [url]);

         useEffect(() => {
              fetchData();
         }, [url, fetchData]);

         return { data: data as T, error, loading };
        };

        export default useFetch;
       ```

*7️⃣ Admin Layout*
   -  `components/Layout/AdminLayout.tsx`:
        -   Provides the basic layout for the admin panel, including the `Sidebar` and `AdminRouter`.
        ```typescript
           import React, { useContext } from 'react';
            import Sidebar from './Sidebar';
            import { ThemeContext } from '../Global/ThemeContext';
            import AdminRouter from './AdminRouter';

            interface AdminLayoutProps {
                children?: React.ReactNode;
            }

            const AdminLayout: React.FC<AdminLayoutProps> = ({ children }) => {
                const { theme } = useContext(ThemeContext);
                return (
                    <div className={`flex h-screen bg-[var(--background-${theme})] text-[var(--text-${theme})]`}>
                       <Sidebar />
                        <div className="flex-1 p-4 overflow-y-auto">
                           <AdminRouter />
                        </div>
                     </div>
               );
            };

            export default AdminLayout;
       ``````typescript
        import React, { useContext } from 'react';
        import Link from 'next/link';
        import { ThemeContext } from '../Global/ThemeContext';
        import { usePathname
