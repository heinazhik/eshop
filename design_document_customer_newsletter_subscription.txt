The database schema created earlier does support the newsletter subscription service (http://localhost:3000/newsletter), but only partially. Specifically:

The Customers table has a column newsletter_opt_in of type BOOLEAN, which can be used to track whether a customer has subscribed to the newsletter.

However, there is no explicit support for unsubscribing or tracking the subscription status over time (e.g., when a customer unsubscribes and then resubscribes).

To fully support the newsletter subscription service, including subscription and unsubscription functionality, we need to make the following changes to the database schema:

Add a subscription_status column to the Customers table to track the current status of the newsletter subscription.

Add a subscription_history table to track changes in subscription status over time.

Updated Database Schema Script
Here’s the Python script to modify the database schema to support the newsletter subscription service:

python
Copy
import psycopg2
from psycopg2 import sql

# Database connection details
DB_NAME = "ecommerce_db"
DB_USER = "your_username"
DB_PASSWORD = "your_password"
DB_HOST = "localhost"
DB_PORT = "5432"

# Connect to the ecommerce database
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
conn.autocommit = True
cursor = conn.cursor()

# Modify the Customers table to add subscription_status
try:
    cursor.execute("""
        ALTER TABLE Customers
        ADD COLUMN subscription_status VARCHAR DEFAULT 'unsubscribed';
    """)
    print("Added subscription_status column to Customers table!")
except psycopg2.Error as e:
    print(f"Error modifying Customers table: {e}")

# Create Subscription_History table
try:
    cursor.execute("""
        CREATE TABLE Subscription_History (
            history_id SERIAL PRIMARY KEY,
            customer_id INTEGER REFERENCES Customers(customer_id),
            status VARCHAR NOT NULL,
            changed_at TIMESTAMP DEFAULT now()
        );
    """)
    print("Created Subscription_History table!")
except psycopg2.Error as e:
    print(f"Error creating Subscription_History table: {e}")

# Close the connection
cursor.close()
conn.close()

print("Database schema updated successfully!")
Explanation of Changes:
subscription_status Column:

Added to the Customers table to track the current subscription status of each customer.

Possible values: subscribed, unsubscribed.

Subscription_History Table:

Tracks the history of subscription status changes for each customer.

Columns:

history_id: Primary key.

customer_id: Foreign key referencing the Customers table.

status: The new subscription status (subscribed or unsubscribed).

changed_at: Timestamp of when the status was changed.

Python Script to Handle Subscription and Unsubscription
Here’s a Python script to handle newsletter subscription and unsubscription:

python
Copy
import psycopg2
from psycopg2 import sql

# Database connection details
DB_NAME = "ecommerce_db"
DB_USER = "your_username"
DB_PASSWORD = "your_password"
DB_HOST = "localhost"
DB_PORT = "5432"

# Connect to the ecommerce database
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
conn.autocommit = True
cursor = conn.cursor()

# Function to subscribe a customer to the newsletter
def subscribe_customer(customer_id):
    try:
        # Update subscription status in Customers table
        cursor.execute("""
            UPDATE Customers
            SET subscription_status = 'subscribed'
            WHERE customer_id = %s;
        """, (customer_id,))

        # Log the subscription in Subscription_History table
        cursor.execute("""
            INSERT INTO Subscription_History (customer_id, status)
            VALUES (%s, 'subscribed');
        """, (customer_id,))

        print(f"Customer {customer_id} subscribed to the newsletter!")
    except psycopg2.Error as e:
        print(f"Error subscribing customer: {e}")

# Function to unsubscribe a customer from the newsletter
def unsubscribe_customer(customer_id):
    try:
        # Update subscription status in Customers table
        cursor.execute("""
            UPDATE Customers
            SET subscription_status = 'unsubscribed'
            WHERE customer_id = %s;
        """, (customer_id,))

        # Log the unsubscription in Subscription_History table
        cursor.execute("""
            INSERT INTO Subscription_History (customer_id, status)
            VALUES (%s, 'unsubscribed');
        """, (customer_id,))

        print(f"Customer {customer_id} unsubscribed from the newsletter!")
    except psycopg2.Error as e:
        print(f"Error unsubscribing customer: {e}")

# Example usage
subscribe_customer(1)  # Subscribe customer with ID 1
unsubscribe_customer(1)  # Unsubscribe customer with ID 1

# Close the connection
cursor.close()
conn.close()
How It Works:
Subscribe:

Updates the subscription_status in the Customers table to subscribed.

Logs the subscription event in the Subscription_History table.

Unsubscribe:

Updates the subscription_status in the Customers table to unsubscribed.

Logs the unsubscription event in the Subscription_History table.

Testing:
Run the schema update script to modify the database.

Use the subscription/unsubscription script to test the functionality.

