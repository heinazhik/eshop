
*8️⃣ Admin Panel Sidebar*
   -  `components/Layout/Sidebar.tsx`:
        -   Renders the navigation menu using data from `admin/config.ts`.
        -   Highlights the active menu item.
         ```typescript
         // components/Layout/Sidebar.tsx
        import React, { useContext } from 'react';
        import Link from 'next/link';
        import { ThemeContext } from '../Global/ThemeContext';
        import { usePathname } from 'next/navigation';
         import { adminConfig } from '@/admin/config';


        const Sidebar: React.FC = () => {
            const { theme, toggleTheme } = useContext(ThemeContext);
            const pathname = usePathname();
            const activeTab = pathname.startsWith('/admin') ? new URLSearchParams(window.location.search).get('tab') : '';


            return (
                <div className={`w-64 bg-[var(--card-${theme})] p-4 border-r border-gray-200 dark:border-gray-700`}>
                    <h2 className="text-2xl font-bold mb-6">Admin Panel</h2>
                    <ul className="space-y-2">
                         {adminConfig.map(link => (
                            <li key={link.tab}>
                                 <Link href={link.href}
                                    className={`block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded ${activeTab === link.tab ? 'bg-gray-200 dark:bg-gray-700 font-semibold' : ''}`}
                                 >
                                     {link.label}
                                 </Link>
                            </li>
                        ))}
                    </ul>
                      <div className="mt-6 border-t border-gray-300 dark:border-gray-600 pt-4">
                          <button
                              onClick={toggleTheme}
                              className="w-full p-2 bg-gray-200 dark:bg-gray-700 rounded hover:bg-gray-300 dark:hover:bg-gray-600"
                           >
                            {theme === "light" ? "Dark Mode" : "Light Mode"}
                         </button>
                     </div>
                 </div>
            );
         };

        export default Sidebar;
        ```
*8.1 Config file for Admin Routes*
    - `admin/config.ts`:
         - Defines the configuration for the sidebar links.
         ```typescript
           // admin/config.ts
            export const adminConfig = [
              { href: '/admin', label: 'Dashboard', tab: '' },
              { href: '/admin?tab=products', label: 'Products', tab: 'products' },
              { href: '/admin?tab=customers', label: 'Customers', tab: 'customers' },
              { href: '/admin?tab=logistics', label: 'Logistics Partners', tab: 'logistics' },
              { href: '/admin?tab=orders', label: 'Orders', tab: 'orders' },
              { href: '/admin?tab=reports', label: 'Sales Reports', tab: 'reports' },
          ];
        ```

*9️⃣ Admin Router Component*
   - `components/Layout/AdminRouter.tsx`:
        -   Dynamically renders the correct admin panel component based on the `tab` query parameter from the URL.
        ```typescript
             // components/Layout/AdminRouter.tsx
           import { usePathname, useSearchParams } from 'next/navigation';
            import Dashboard from '@/components/Dashboard/Dashboard';
           import ProductsPanel from '@/components/Products/ProductsPanel';
           import CustomersPanel from '@/components/Customers/CustomersPanel';
           import LogisticsPanel from '@/components/LogisticsPartners/LogisticsPanel';
           import OrdersPanel from '@/components/Orders/OrdersPanel';
           import SalesReportsPanel from '@/components/SalesReports/SalesReportsPanel';


           const AdminRouter = () => {
               const pathname = usePathname();
                const searchParams = useSearchParams();
                const tab = searchParams.get('tab') || '';

               switch (tab) {
                   case "products":
                       return <ProductsPanel />;
                   case "customers":
                       return <CustomersPanel />;
                   case "logistics":
                      return <LogisticsPanel />;
                   case "orders":
                       return <OrdersPanel />;
                   case "reports":
                       return <SalesReportsPanel />;
                    default:
                     return <Dashboard />;
                }
            };

            export default AdminRouter;
        ```

*🔟 Theme Context*
   -   `components/Global/ThemeContext.tsx`:
        -   Manages the application's theme (light/dark mode).

         ```typescript
          import React, { createContext, useState, ReactNode } from 'react';

         interface ThemeContextType {
              theme: 'light' | 'dark';
              toggleTheme: () => void;
         }

        const ThemeContext = createContext<ThemeContextType>({
             theme: 'light',
              toggleTheme: () => {}
          });

        interface ThemeProviderProps {
             children: ReactNode;
        }

        const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
           const [theme, setTheme] = useState<'light' | 'dark'>('light');

           const toggleTheme = () => {
                setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
             };
            return (
                <ThemeContext.Provider value={{ theme, toggleTheme }}>
                    {children}
               </ThemeContext.Provider>
             );
        };

        export { ThemeContext, ThemeProvider };
       ```

*1️⃣1️⃣ Common Utilities*

    -   `components/common.ts`:
        -   Provides helper functions like formatting dates.
        ```typescript
        export const formatDate = (dateString:string) => {
         try {
            const date = new Date(dateString);
            const formatted = date.toLocaleDateString('en-US', {
               year: 'numeric',
               month: 'long',
               day: 'numeric',
               hour: 'numeric',
               minute: 'numeric'
            });
               return formatted;
           } catch (e) {
                return dateString;
            }
        }
        ```

*1️⃣2️⃣ Admin Panel Page*

    -   `pages/admin/index.tsx`:
        -   Implements basic authentication using `utils/auth.js`, and renders `AdminLayout`.
        - Renders a login form if the user is not authenticated.

        ```typescript
        // pages/admin/index.tsx
        import React, { useState, useEffect } from 'react';
        import AdminLayout from '@/components/Layout/AdminLayout';
         import { ThemeProvider } from '@/components/Global/ThemeContext';
         import { useRouter } from 'next/router';
         import { checkAdminCredentials } from '@/utils/auth';

        const AdminPage: React.FC = () => {
            const [isAuthenticated, setIsAuthenticated] = useState(false);
            const [showLoginForm, setShowLoginForm] = useState(true);
            const [username, setUsername] = useState('');
            const [password, setPassword] = useState('');
            const router = useRouter();

             useEffect(() => {
                const storedAuth = localStorage.getItem('authenticated');
                 if (storedAuth === 'true') {
                    setIsAuthenticated(true);
                     setShowLoginForm(false)
                 } else {
                     setShowLoginForm(true)
                 }

            }, []);


            const handleLogin = (e: React.FormEvent) => {
                e.preventDefault();
               if(checkAdminCredentials(username, password)){
                    setIsAuthenticated(true);
                     localStorage.setItem('authenticated', 'true');
                    setShowLoginForm(false);
                    router.push('/admin');
               } else {
                    alert('Invalid credentials');
                 }
            }
            if (showLoginForm){
                 return (
                    <div className="flex items-center justify-center h-screen">
                      <div className="bg-white dark:bg-gray-800 p-8 rounded shadow-md w-96">
                            <h2 className="text-2xl font-bold mb-6 text-center">Admin Login</h2>
                            <form onSubmit={handleLogin} className="space-y-4">
                                <div>
                                   <input
                                        type='text'
                                        placeholder='Username'
                                        value={username}
                                        onChange={(e) => setUsername(e.target.value)}
                                        className="w-full p-2 border rounded bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)] focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"
                                   />
                                </div>
                                <div>
                                    <input
                                        type="password"
                                        placeholder="Password"
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        className="w-full p-2 border rounded bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)] focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"
                                    />
                                </div>
                             <button
                                  type="submit"
                                 className="bg-[var(--primary-accent)] text-white  rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 p-2 w-full">
                                    Login
                                </button>
                           </form>
                       </div>
                   </div>
                )
           }

           return (
                <ThemeProvider>
                     <AdminLayout />
                </ThemeProvider>
            );
         };

       export default AdminPage;
        ```
*1️⃣3️⃣ Dashboard Panel*
    -  `components/Dashboard/Dashboard.tsx`:
         -  Displays key metrics, recent orders, and shortcuts.
         -   Uses the `useFetch` hook to retrieve data for orders, products, and customers.

          ```typescript
            import React from 'react';
            import KeyMetricsCard from './KeyMetricsCard';
            import RecentOrdersTable from './RecentOrdersTable';
            import DashboardShortcuts from './DashboardShortcuts';
            import useFetch from '@/hooks/useFetch';
            import { Order, Product, Customer } from '@/types';

            const Dashboard: React.FC = () => {
                const { data: orders, error: ordersError, loading: ordersLoading } = useFetch<Order[]>('/orders');
                const { data: products, error: productsError, loading: productsLoading } = useFetch<Product[]>('/products');
                const { data: customers, error: customersError, loading: customersLoading } = useFetch<Customer[]>('/customers');

                if (ordersLoading || productsLoading || customersLoading) {
                    return <div>Loading...</div>;
                }

                if (ordersError || productsError || customersError) {
                    return <div>Error loading data.</div>
                }

            const totalOrders = orders ? orders.length : 0;
            const totalProducts = products ? products.length : 0;
            const totalCustomers = customers ? customers.length : 0;
            const totalSales = orders?.reduce((acc, order) => acc + order.total_amount, 0) || 0;
            const recentOrders = orders?.slice(0, 5) || [];

            return (
                <div>
                    <h2 className="text-2xl font-bold mb-4">Dashboard</h2>

                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                        <KeyMetricsCard title="Total Products" value={totalProducts} />
                       <KeyMetricsCard title="Total Customers" value={totalCustomers} />
                        <KeyMetricsCard title="Total Orders" value={totalOrders} />
                        <KeyMetricsCard title="Total Sales" value={totalSales} prefix="$" />
                    </div>

                    <div className="mb-6">
                        <h3 className="text-xl font-semibold mb-2">Recent Orders</h3>
                        <RecentOrdersTable orders={recentOrders} />
                    </div>

                    <div>
                        <h3 className="text-xl font-semibold mb-2">Quick Actions</h3>
                          <DashboardShortcuts />
                    </div>
                 </div>
           );
        };

        export default Dashboard;
          ```

*1️⃣3️⃣.1 Dashboard Key Metrics*
    - `components/Dashboard/KeyMetricsCard.tsx`:
       -   Displays a single key metric with a title and value.

        ```typescript
        import React from 'react';

       interface KeyMetricsCardProps {
          title: string;
           value: number;
           prefix?: string;
            suffix?: string;
         }

       const KeyMetricsCard: React.FC<KeyMetricsCardProps> = ({ title, value, prefix, suffix }) => {
         return (
           <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
             <h3 className="text-lg font-semibold mb-2">{title}</h3>
             <p className="text-3xl font-bold">{prefix}{value}{suffix}</p>
           </div>
         );
        };

       export default KeyMetricsCard;
        ```

*1️⃣3️⃣.2 Dashboard Recent Orders*

     - `components/Dashboard/RecentOrdersTable.tsx`:
        -   Displays a table of the most recent orders.
         ```typescript
            import React from 'react';
             import { Order } from '@/types';
            import { formatDate } from '../common';

            interface RecentOrdersTableProps {
             orders: Order[];
            }

           const RecentOrdersTable: React.FC<RecentOrdersTableProps> = ({ orders }) => {
              return (
               <div className="overflow-x-auto">
                <table className="min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded">
                  <thead>
                     <tr>
                        <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Order ID</th>
                        <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Date</th>
                        <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Status</th>
                        <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Total Amount</th>
                       </tr>
                     </thead>
                    <tbody>
                     {orders.map((order) => (
                         <tr key={order.order_id} className="hover:bg-gray-100 dark:hover:bg-gray-700">
                            <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{order.order_id}</td>
                             <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{formatDate(order.created_at)}</td>
                           <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{order.status}</td>
                            <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">${order.total_amount}</td>
                         </tr>
                     ))}
                   </tbody>
                 </table>
               </div>
                );
             };

           export default RecentOrdersTable;
         ```

*1️⃣3️⃣.3 Dashboard Shortcuts*
     - `components/Dashboard/DashboardShortcuts.tsx`:
         -   Provides a set of shortcut buttons to other parts of the admin panel.

         ```typescript
           import React from 'react';
            import { Button } from '../UI/Button';
            import Link from 'next/link';

            const DashboardShortcuts: React.FC = () => {
              return (
                <div className="space-x-4">
                     <Link href="/admin?tab=products">
                          <Button>Add Product</Button>
                     </Link>
                     <Link href="/admin?tab=orders">
                         <Button>View Orders</Button>
                     </Link>
                     <Link href="/admin?tab=reports">
                        <Button>Generate Reports</Button>
                    </Link>
                 </div>
               );
            };

           export default DashboardShortcuts;
         ```

*1️⃣4️⃣ Products Panel*
    -   `components/Products/ProductsPanel.tsx`:
         - Manages the display and filtering of products, and handles adding/editing product modal.
          ```typescript
            import React, { useState } from 'react';
            import ProductTable from './ProductTable';
            import AddEditProductModal from './AddEditProductModal';
            import { Button } from '../UI/Button';
            import { Product } from '@/types';
             import ProductFilter from './ProductFilter';
             import useFetch from '@/hooks/useFetch';

            const ProductsPanel: React.FC = () => {
                const { data: products, error, loading, } = useFetch<Product[]>('/products')
                 const [isModalOpen, setIsModalOpen] = useState(false);
                const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
                const [filteredProducts, setFilteredProducts] = useState<Product[] | null>(null);

                const handleAddProduct = () => {
                   setSelectedProduct(null);
                    setIsModalOpen(true);
                };

                if(loading){
                   return <div>Loading ...</div>
                }
                if(error){
                   return <div>Error loading Products.</div>
                }


                const handleEditProduct = (product: Product) => {
                   setSelectedProduct(product);
                   setIsModalOpen(true);
                };
               const handleCloseModal = () => {
                   setIsModalOpen(false);
               }

                const handleProductFilter = (filtered:Product[]|null) => {
                    setFilteredProducts(filtered);
                }
                return (
                    <div>
                       <div className='flex justify-between items-center mb-4'>
                            <h2 className="text-2xl font-bold mb-4">Products</h2>
                           <Button onClick={handleAddProduct}>Add Product</Button>
                      </div>

                      <ProductFilter products={products} onFilter={handleProductFilter} />
                      <ProductTable products={filteredProducts || products || []} onEdit={handleEditProduct}  />
                       <AddEditProductModal isOpen={isModalOpen} onClose={handleCloseModal} product={selectedProduct} />
                    </div>
               );
            };

            export default ProductsPanel;
          ```

*1️⃣5️⃣ Product Table*
    -   `components/Products/ProductTable.tsx`:
         - Displays the list of products using the improved `Table` and `Pagination` component.

          ```typescript
            import React, { useState } from 'react';
            import { Product } from '@/types';
            import { Button } from '../UI/Button';
            import { formatDate } from '../common';
           import { Table } from '../UI/Table';
            import { Pagination } from '../UI/Pagination';

            interface ProductTableProps {
             products: Product[];
              onEdit: (product: Product) => void;
            }

            const ProductTable: React.FC<ProductTableProps> = ({ products, onEdit }) => {
              const [currentPage, setCurrentPage] = useState(1);
              const productsPerPage = 5;
              const totalPages = Math.ceil(products.length / productsPerPage);
                const startIndex = (currentPage -1) * productsPerPage;
                const endIndex = startIndex + productsPerPage;

              const paginatedProducts = products.slice(startIndex, endIndex);

               const headers = ["ID", "Name", "Category", "Price", "Stock", "Created At", "Actions"];
               const rows = paginatedProducts.map((product) => [
                    product.product_id.toString(),
                   product.name,
                   product.category,
                  `$${product.price}`,
                    product.stock_quantity.toString(),
                   formatDate(product.created_at),
                    <Button size="sm" onClick={() => onEdit(product)}>Edit</Button>,
                ]);
                return (
                    <div>
                        <Table headers={headers} rows={rows} />
                       <Pagination
                         currentPage={currentPage}
                            totalPages={totalPages}
                            onPageChange={(page) => setCurrentPage(page)}
                        />
                   </div>
                );
            };

            export default ProductTable;
        ```

*1️⃣6️⃣ Product Filter*
    -   `components/Products/ProductFilter.tsx`:
        -   Provides filtering for products by name or category.
         ```typescript
            import React, { useState, useEffect } from 'react';
            import { Product } from '@/types';
            import { Input } from '../UI/Input';
             import { Option } from '@/types';
            interface ProductFilterProps {
              products: Product[];
              onFilter: (filtered:Product[]|null) => void;
            }
            const ProductFilter: React.FC<ProductFilterProps> = ({ products, onFilter }) => {
                const [nameFilter, setNameFilter] = useState('');
                const [categoryFilter, setCategoryFilter] = useState('');
               const [categoryOptions, setCategoryOptions] = useState<Option[]>([]);
               useEffect(() => {
                  if(products){
                     const categories = [...new Set(products.map(product => product.category))];
                        setCategoryOptions(categories.map(category => ({label: category, value: category})));
                    }
                }, [products])

                useEffect(() => {
                     if (products){
                         let filtered = products;
                          if (nameFilter) {
                            filtered = filtered.filter(product => product.name.toLowerCase().includes(nameFilter.toLowerCase()));
                         }
                          if(categoryFilter){
                             filtered = filtered.filter(product => product.category === categoryFilter);
                          }
                          onFilter(filtered.length > 0 ? filtered : null);
                     } else {
                         onFilter(null);
                     }

               }, [nameFilter, categoryFilter, products, onFilter]);

               const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
                    setNameFilter(e.target.value);
                };
                const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
                   setCategoryFilter(e.target.value);
                 }


                return (
                    <div className="flex flex-wrap gap-4 mb-4">
                        <div className="flex-1">
                            <Input type="text" placeholder="Filter by name" value={nameFilter} onChange={handleNameChange} />
                        </div>
                        <div className="flex-1">
                            <select className='border rounded p-2 w-full bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)]'
                              value={categoryFilter} onChange={handleCategoryChange}
                           >
                             <option value="">Filter by Category</option>
                                 {categoryOptions?.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
                            </select>
                         </div>
                  </div>
              );
            };

            export default ProductFilter;
         ```

*1️⃣7️⃣ Add/Edit Product Modal*
    -   `components/Products/AddEditProductModal.tsx`:
        -   Provides a modal for adding or editing product details.
        - Implements form validation using Zod.
        ```typescript
        // components/Products/AddEditProductModal.tsx
            import React, { useState, useEffect } from 'react';
            import { Modal } from '../UI/Modal';
            import { Input } from '../UI/Input';
            import { Button } from '../UI/Button';
             import { Product } from '@/types';
             import apiFetch from '@/utils/api';
            import { z } from 'zod';

           interface AddEditProductModalProps {
               isOpen: boolean;
              onClose: () => void;
               product: Product | null;
           }

           const productSchema = z.object({
               name: z.string().min(1, 'Name is required').max(255, 'Name must be less than 255 characters'),
               category: z.string().min(1, 'Category is required').max(255, 'Category must be less than 255 characters'),
                price: z.number({invalid_type_error: 'Price must be a number'}).min(0, 'Price must be greater than 0'),
              stock_quantity: z.number({invalid_type_error: 'Stock quantity must be a number'}).min(0, 'Stock quantity must be greater than 0'),
                description: z.string().optional(),
           });

         const AddEditProductModal: React.FC<AddEditProductModalProps> = ({ isOpen, onClose, product }) => {
            const [name, setName] = useState('');
             const [category, setCategory] = useState('');
             const [price, setPrice] = useState('');
            const [stockQuantity, setStockQuantity] = useState('');
            const [description, setDescription] = useState('');
             const [isEdit, setIsEdit] = useState(false);
               const [errors, setErrors] = useState<{ [key: string]: string }>({});

            useEffect(() => {
               if (product) {
                  setIsEdit(true);
                   setName(product.name);
                     setCategory(product.category);
                     setPrice(product.price.toString());
                     setStockQuantity(product.stock_quantity.toString());
                    setDescription(product.description);
                 } else {
                     setIsEdit(false);
                    setName('');
                      setCategory('');
                      setPrice('');
                     setStockQuantity('');
                     setDescription('');
                  }
           }, [product]);

           const handleSubmit = async (event: React.FormEvent) => {
               event.preventDefault();
             try {
                    const parsedData = productSchema.parse({
                        name,
                       category,
                       price: parseFloat(price),
                      stock_quantity: parseFloat(stockQuantity),
                        description
                   });
                 setErrors({});
                   const productData = {
                      name: parsedData.name,
                       category: parsedData.category,
                       price: parsedData.price,
                      stock_quantity: parsedData.stock_quantity,
                       description: parsedData.description,
                    };

                   if (isEdit && product) {
                         await apiFetch(`/products/${product.product_id}`, { method: 'PUT', body: productData });
                       alert('Product updated successfully!');
                   } else {
                       await apiFetch('/products', { method: 'POST', body: productData });
                      alert('Product added successfully!');
                   }
                   onClose();

               } catch (error:any) {
                   if (error instanceof z.ZodError) {
                         const newErrors: { [key: string]: string } = {};
                        error.errors.forEach((err) => {
                           newErrors[err.path[0]] = err.message
                        });
                       setErrors(newErrors)
                  } else {
                     alert(error.message || 'Error saving product');
                    }
               }
            };

            return (
               <Modal isOpen={isOpen} onClose={onClose} title={isEdit ? 'Edit Product' : 'Add Product'}>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <Input
                              type="text"
                               placeholder="Name"
                               value={name}
                               onChange={(e) => setName(e.target.value)}
                             error={errors.name}
                           />
                           {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
                        </div>
                       <div>
                            <Input type="text" placeholder="Category" value={category} onChange={(e) => setCategory(e.target.value)}
                               error={errors.category}
                           />
                           {errors.category && <p className="text-red-500 text-sm">{errors.category}</p>}
                       </div>
                        <div>
                          <Input
                                type="number"
                                placeholder="Price"
                                value={price}
                               onChange={(e) => setPrice(e.target.value)}
                              error={errors.price}
                            />
                            {errors.price && <p className="text-red-500 text-sm">{errors.price}</p>}
                        </div>
                        <div>
                            <Input
                                type="number"
                               placeholder="Stock Quantity"
                               value={stockQuantity}
                               onChange={(e) => setStockQuantity(e.target.value)}
                             error={errors.stock_quantity}
                           />
                            {errors.stock_quantity && <p className="text-red-500 text-sm">{errors.stock_quantity}</p>}
                       </div>
                      <div>
                            <Input
                              type="text"
                               placeholder="Description"
                               value={description}
                               onChange={(e) => setDescription(e.target.value)}
                             />
                       </div>
                        <div className="flex justify-end">
                           <Button type="submit">{isEdit ? 'Update Product' : 'Add Product'}</Button>
                       </div>
                   </form>
                </Modal>
             );
            };

            export default AddEditProductModal;
         ```

*1️⃣8️⃣ Customers Panel*
     -  `components/Customers/CustomersPanel.tsx`:
          -   Manages the display of customers and customer profiles and filters.
         ```typescript
            import React, { useState } from 'react';
            import CustomerTable from './CustomerTable';
             import CustomerProfile from './CustomerProfile';
            import { Customer } from '@/types';
            import useFetch from '@/hooks/useFetch';
           import CustomerFilter from './CustomerFilter';

           const CustomersPanel: React.FC = () => {
               const { data: customers, error, loading } = useFetch<Customer[]>('/customers');
             const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
              const [filteredCustomers, setFilteredCustomers] = useState<Customer[] | null>(null)
              const handleCustomerSelect = (customer: Customer) => {
                  setSelectedCustomer(customer);
               };

                if (loading) {
                    return <div>Loading ...</div>
                 }
                if(error){
                    return <div>Error loading customer data.</div>
                }
              const handleCustomerFilter = (filtered:Customer[]|null) => {
                   setFilteredCustomers(filtered)
                }

              return (
                 <div>
                      <div className='flex justify-between items-center mb-4'>
                           <h2 className="text-2xl font-bold mb-4">Customers</h2>
                    </div>
                    <CustomerFilter customers={customers} onFilter={handleCustomerFilter} />
                    <div className='flex flex-wrap gap-4'>
                       <div className='flex-1 overflow-x-auto'>
                            <CustomerTable
                            customers={filteredCustomers || customers || []}
                                onSelect={handleCustomerSelect}
                           />
                        </div>
                        {selectedCustomer &&  <div className='flex-1'>
                           <CustomerProfile customer={selectedCustomer} />
                        </div>}
                    </div>
                </div>
           );
         };

            export default CustomersPanel;
         ```

*1️⃣9️⃣ Customer Table*
    -   `components/Customers/CustomerTable.tsx`:
        - Displays a list of customers with pagination using the improved `Table` component.
        ```typescript
         // components/Customers/CustomerTable.tsx
            import React, { useState } from 'react';
           import { Customer } from '@/types';
           import { formatDate } from '../common';
          import { Table } from '../UI/Table';
            import { Pagination } from '../UI/Pagination';

            interface CustomerTableProps {
             customers: Customer[];
             onSelect: (customer: Customer) => void;
            }

           const CustomerTable: React.FC<CustomerTableProps> = ({ customers, onSelect }) => {
             const [currentPage, setCurrentPage] = useState(1);
               const customersPerPage = 5;
               const totalPages = Math.ceil(customers.length / customersPerPage);
                const startIndex = (currentPage -1) * customersPerPage;
                const endIndex = startIndex + customersPerPage;

               const paginatedCustomers = customers.slice(startIndex, endIndex);

               const headers = ["ID", "Name", "Email", "Phone", "Registration Date", "Newsletter", "Subscription"];

               const rows = paginatedCustomers.map(customer => [
                    customer.customer_id.toString(),
                    customer.name,
                   customer.email,
                   customer.phone || '',
                    formatDate(customer.registration_date),
                    customer.newsletter_opt_in ? 'Yes' : 'No',
                    customer.subscription_status,
                ]
                );
                 return (
                     <div>
                        <Table headers={headers} rows={rows} onRowClick={onSelect} />
                         <Pagination
                            currentPage={currentPage}
                            totalPages={totalPages}
                            onPageChange={(page) => setCurrentPage(page)}
                        />
                     </div>
                );
            };

            export default CustomerTable;
        ```

*2️⃣0️⃣ Customer Filter*
    -   `components/Customers/CustomerFilter.tsx`:
        -   Allows filtering of customers by name, email, or subscription status.
        ```typescript
         import React, { useState, useEffect } from 'react';
            import { Customer } from '@/types';
             import { Input } from '../UI/Input';

            interface CustomerFilterProps {
                 customers: Customer[];
                onFilter: (filtered:Customer[]|null) => void;
            }

             const CustomerFilter: React.FC<CustomerFilterProps> = ({ customers, onFilter }) => {
                const [nameFilter, setNameFilter] = useState('');
                 const [emailFilter, setEmailFilter] = useState('');
                 const [subscriptionFilter, setSubscriptionFilter] = useState('');
                 const [subscriptionOptions, setSubscriptionOptions] = useState<string[]>([]);
                useEffect(() => {
                    if(customers){
                        const statuses = [...new Set(customers.map(customer => customer.subscription_status))];
                        setSubscriptionOptions(statuses);
                    }
                }, [customers]);

                useEffect(() => {
                   if (customers) {
                        let filtered = customers;
                        if (nameFilter) {
                            filtered = filtered.filter(customer => customer.name.toLowerCase().includes(nameFilter.toLowerCase()));
                        }
                       if(emailFilter){
                           filtered = filtered.filter(customer => customer.email.toLowerCase().includes(emailFilter.toLowerCase()));
                        }
                       if(subscriptionFilter){
                           filtered = filtered.filter(customer => customer.subscription_status === subscriptionFilter)
                        }
                       onFilter(filtered.length > 0 ? filtered : null);
                   } else {
                       onFilter(null)
                    }


                }, [nameFilter, emailFilter, subscriptionFilter, customers, onFilter]);

                const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
                    setNameFilter(e.target.value);
                 };
                const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
                    setEmailFilter(e.target.value);
                 }

                 const handleSubscriptionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
                    setSubscriptionFilter(e.target.value)
                 };

                 return (
                   <div className="flex flex-wrap gap-4 mb-4">
                       <div className="flex-1">
                       <Input type="text" placeholder="Filter by name" value={nameFilter} onChange={handleNameChange} />
                       </div>
                       <div className="flex-1">
                             <Input type="text" placeholder="Filter by email" value={emailFilter} onChange={handleEmailChange} />
                      </div>
                      <div className="flex-1">
                          <select className='border rounded p-2 w-full bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)]'
                               value={subscriptionFilter} onChange={handleSubscriptionChange}
                           >
                             <option value="">Filter by Subscription Status</option>
                               {subscriptionOptions?.map(status => <option key={status} value={status}>{status}</option>)}
                           </select>
                      </div>
                    </div>
                  );
            };

            export default CustomerFilter;
         ```
