Restricting access to only authenticated users is a critical security practice. Here's a breakdown of common practices, specifically within the context of Next.js and a backend API:

Core Principles:

Authentication: Verifying the identity of the user (are they who they claim to be?).

Authorization: Determining what resources the authenticated user is allowed to access (are they allowed to view the admin page?).

Common Practices (Next.js & Backend API):

Backend API Authentication:

JWT (JSON Web Tokens): This is a very common and recommended approach.

When a user logs in, your backend API generates a JWT containing user information (roles/permissions). This token is signed and cannot be easily tampered with.

The frontend stores this token (typically in localStorage or httpOnly cookies).

On each request to a protected backend API endpoint, the frontend sends the JWT in the Authorization header (e.g., Authorization: Bearer <token>).

The backend API verifies the token's signature and extracts user data. If it's valid, the user is granted access; otherwise, an error is returned (401 Unauthorized).

Session Cookies: (Less common in modern SPAs, but still valid)

The backend creates a session when a user logs in and stores a session ID in a cookie.

Each request from that user automatically includes the cookie. The backend uses this to check if the user is logged in and can access resources.

Frontend (Next.js) Authentication:

Client-Side Authentication (less secure, not recommended for admin pages):

You could check for a token in local storage on the frontend and redirect to login if it's missing.

Problem: This is easily bypassed because users could manipulate the storage or have other ways of gaining access.

Use Case: Sometimes used for less sensitive data fetching where access is not very restrictive, but never for admin pages.

Server-Side Checks (Recommended for admin pages):

This involves checking authentication before rendering a page. Next.js provides ways to do this. Here are the common approaches.

Middleware (Next.js 13+ app directory):

You can define a middleware file that runs before your page components. In this middleware, you'd intercept all requests to /admin and:

Verify the JWT (by making a request to your backend or verifying using a library and your shared secret key).

If the token is valid, continue to the page.

If the token is invalid or missing, redirect to /login

Advantage: More flexible and powerful way to handle authentication and access control.

Example:

```typescript
  // middleware.ts
  import { NextResponse } from 'next/server';
  import type { NextRequest } from 'next/server';
  import { verifyJwtToken } from './utils/auth';  // Implement your own token verification function

  export async function middleware(request: NextRequest) {
     if (request.nextUrl.pathname.startsWith('/admin')) {
        const token = request.cookies.get('token')?.value; //  or request.headers.get('Authorization')?.split(' ')[1];

        if (!token) {
          return NextResponse.redirect(new URL('/login', request.url));
        }

        try {
          const verifiedToken = await verifyJwtToken(token); // you need to create a function for validating token
          if(!verifiedToken){
            return NextResponse.redirect(new URL('/login', request.url));
          }
        } catch (error) {
          console.log("middleware error", error);
           return NextResponse.redirect(new URL('/login', request.url));
        }

      }
    return NextResponse.next();
  }
  ```
Use code with caution.
getServerSideProps (Next.js pages directory):

If you're using the pages directory, you can use getServerSideProps on the /admin page:

This function runs on the server before the page is rendered.

You can check for the token (e.g., from a cookie) in getServerSideProps.

If the user is authenticated and authorized, render the page.

Otherwise, redirect to the login page.

Example:

// pages/admin/index.tsx

import { GetServerSideProps } from 'next';
import { verifyJwtToken } from '../../utils/auth'; // Implement your own token verification function

export const getServerSideProps: GetServerSideProps = async (context) => {
   const token = context.req.cookies.token; // get token from request cookies

   if (!token) {
      return {
          redirect: {
          destination: '/login',
          permanent: false,
          },
      };
   }

    try {
        const verifiedToken = await verifyJwtToken(token);
        if(!verifiedToken){
            return {
                redirect: {
                    destination: '/login',
                    permanent: false,
                },
            };
        }
    } catch (error) {
        console.log('getServerSideProps Error', error);
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        };
    }

   return {
      props: {}, // you may need to add props here for page component
   };
};
const AdminPage: React.FC = () => {
  // your admin page component here

};

export default AdminPage;
Use code with caution.
Tsx
Authorization (Backend API):

Role-Based Access Control (RBAC): In your JWT or backend session, store the roles the user has (e.g., "admin", "editor", etc.).

On backend requests to admin endpoints, verify that the user has the "admin" role.

Fine-grained Permissions: For complex applications, you can define specific permissions (e.g., "create-products," "edit-orders"). Your backend will enforce those permissions based on the user's role.

Example Flow (using JWT & Middleware):

User logs in:

User submits credentials to the /login endpoint of the backend API.

Backend verifies credentials, generates a JWT, and sends the JWT back in the response.

Frontend stores the JWT:

Frontend stores the token in httpOnly cookies (recommended) or localStorage.

User navigates to /admin:

Next.js middleware intercepts the request.

Middleware extracts the token from the cookie.

Middleware uses verifyJwtToken (or makes a request to a backend endpoint) to check the token.

If token is invalid:

Middleware redirects to /login.

If token is valid:

Middleware continues the request and allows the admin page component to render.

Admin page component makes API requests:

The frontend includes the JWT in the Authorization header for requests to the backend API.

Backend API verifies token for each request and authorizes based on user's roles.

Important Considerations:

httpOnly Cookies: For sensitive tokens (like auth tokens), prefer httpOnly cookies as they are not accessible through client-side JavaScript, reducing the risk of XSS attacks.

Security Libraries: Use well-established libraries for JWT management (e.g., jsonwebtoken in Node.js, jose in Javascript, jwt-decode to decode token on the frontend).

Secret Key Management: Keep your secret keys secret. Do not hardcode them in your application, use environment variables, secrets manager, or similar.

HTTPS: Always use HTTPS for production to encrypt all traffic, especially authentication tokens.

Backend Authorization: Make sure the backend is also doing authorization checks. Do not rely solely on frontend security.

Logout: Implement a proper logout mechanism that removes tokens from local storage or cookies and redirects to the login page.

Session Management: If you're using server-side sessions, make sure they are properly invalidated on logout and have expiration policies.

In Summary:

For your /admin page, the most robust approach is to:

Authenticate users using a backend API with JWTs and store the token securely ( httpOnly cookie is recommended).

Use Next.js middleware (preferred in new app directory) or getServerSideProps (in pages directory) for server-side checks.

Enforce authorization using roles or permissions on your backend API.

By combining these techniques, you'll create a secure and protected admin interface. Let me know if you'd like more details on any of these specific points.
