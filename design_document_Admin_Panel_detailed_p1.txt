Detailed Technical Design Specification: E-commerce Admin Panel
1. Overall Architecture
Framework: Next.js (with Typescript)

Styling: Tailwind CSS

State Management: React Context API (for simple global state, like theme) or Zustand (for more complex state)

Data Fetching: fetch API (or a library like axios) for communication with the backend API.

UI Components: Reusable React components.

Form Handling: React Hook Form for controlled forms, and Zod for schema validation.

Database Interaction: Assume backend API exposes REST endpoints.

2. Folder Structure
admin/
├── components/
│   ├── Dashboard/
│   │   ├── KeyMetricsCard.tsx
│   │   ├── RecentOrdersTable.tsx
│   │   └── DashboardShortcuts.tsx
│   ├── Products/
│   │   ├── ProductTable.tsx
│   │   ├── AddEditProductModal.tsx
│   │   └── ProductFilter.tsx
│   ├── Customers/
│   │   ├── CustomerTable.tsx
│   │   ├── CustomerProfile.tsx
│   │   └── CustomerFilter.tsx
│   ├── LogisticsPartners/
│   │   ├── PartnerTable.tsx
│   │   ├── AddEditPartnerModal.tsx
│   │   └── PartnerFilter.tsx
│   ├── Orders/
│   │   ├── OrderTable.tsx
│   │   ├── OrderDetails.tsx
│   │   └── OrderFilter.tsx
│   ├── SalesReports/
│   │   ├── ReportGenerationForm.tsx
│   │   ├── ReportTable.tsx
│   │   └── ReportChart.tsx
│   ├── UI/
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Modal.tsx
│   │   ├── Table.tsx
│   │   └── Pagination.tsx
│   ├── Layout/
│   │   ├── AdminLayout.tsx
│   │   └── Sidebar.tsx
│   ├── Global/
│       ├── ThemeContext.tsx
│   └── common.ts
├── hooks/
│   └── useFetch.ts
├── pages/
│   └── admin/
│       └── index.tsx
├── styles/
│   └── globals.css
├── utils/
│   └── api.ts
├── types/
    ├── index.ts
└── public/
    └── ... (static assets)
Use code with caution.
3. Global Styles (styles/globals.css)
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Light Mode */
  --background-light: #F7F9FC;
  --text-light: #2C2C2C;
  --primary-accent: #4CAF50;
  --secondary-accent: #FFC107;
  --link-light: #007BFF;
  --card-light: #FFFFFF;
  --footer-light: #F1F3F6;

  /* Dark Mode */
  --background-dark: #121212;
  --text-dark: #FFFFFF;
  --link-dark: #80BFFF;
  --card-dark: #1E1E1E;
  --footer-dark: #181818;
}
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif; /* or your preferred font */
}
/* Theme based styles will be dynamically applied via javascript with css variables*/
Use code with caution.
Css
4. Shared Types (types/index.ts)
export interface Product {
  product_id: number;
  name: string;
  category: string;
  price: number;
  stock_quantity: number;
  description: string;
  created_at: string;
}

export interface Customer {
    customer_id: number;
    name: string;
    email: string;
    phone?: string;
    address: any;
    registration_date: string;
    newsletter_opt_in: boolean;
    subscription_status: string;
}

export interface LogisticsPartner {
  partner_id: number;
  name: string;
  region?: string;
  contact_details: any;
}

export interface Order {
    order_id: number;
    customer_id?: number;
    status: string;
    total_amount: number;
    created_at: string;
}
export interface OrderItem {
    order_item_id: number;
    order_id: number;
    product_id: number;
    quantity: number;
    price: number;
}
export interface SalesReport {
    report_id: number;
    date_range: any;
    total_sales: number;
    orders_count: number;
}
export interface ApiResponse<T> {
    data: T;
    error: string | null;
    loading: boolean;
}

export interface Option {
    value: string;
    label: string;
}
Use code with caution.
TypeScript
5. API Utility (utils/api.ts)
This file would be used to configure the base API url and any authorization headers that need to be added to the requests. This can be extended to include custom logic and also handle errors such as 401, 403, 500 etc..

const API_BASE_URL = 'http://localhost:8080'; // Replace with your actual API URL

interface RequestOptions extends RequestInit {
    headers?: HeadersInit;
    body?: any;
}

async function apiFetch<T>(url: string, options: RequestOptions = {}): Promise<T> {
    const headers: HeadersInit = {
        'Content-Type': 'application/json',
        ...(options.headers || {})
    };
    const requestOptions: RequestOptions = {
        ...options,
        headers: headers
    }
  if(options.body){
    requestOptions.body = JSON.stringify(options.body);
  }
    try {
        const response = await fetch(`${API_BASE_URL}${url}`, requestOptions);
        if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.message;
            } catch (e) {
                // if response cannot be parsed as json, use default message
            }
           throw new Error(errorMessage);
        }
        return await response.json();
    } catch (error:any) {
        console.error('API Error:', error);
       throw error;
    }
}

export default apiFetch;
Use code with caution.
TypeScript
6. Use Fetch Hook (hooks/useFetch.ts)
import { useState, useEffect, useCallback } from 'react';
import apiFetch from '@/utils/api';
import { ApiResponse } from '@/types';

const useFetch = <T>(url: string): ApiResponse<T> => {
    const [data, setData] = useState<T | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState(true);


    const fetchData = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
          const result:T = await apiFetch<T>(url);
          setData(result);
        } catch (err:any) {
          setError(err.message || 'Failed to fetch data');
          setData(null);
        } finally {
          setLoading(false);
        }
      }, [url]);
    useEffect(() => {
        fetchData();
    }, [url, fetchData]);
    return { data: data as T, error, loading };
};

export default useFetch;
Use code with caution.
TypeScript
7. Admin Layout (components/Layout/AdminLayout.tsx)
This component will handle the overall layout of the admin panel.

import React, { useState, useContext } from 'react';
import Sidebar from './Sidebar';
import { ThemeContext } from '../Global/ThemeContext';

interface AdminLayoutProps {
  children: React.ReactNode;
}

const AdminLayout: React.FC<AdminLayoutProps> = ({ children }) => {
  const { theme } = useContext(ThemeContext);
  return (
    <div className={`flex h-screen bg-[var(--background-${theme})] text-[var(--text-${theme})]`}>
      <Sidebar />
      <div className="flex-1 p-4 overflow-y-auto">
         {children}
      </div>
    </div>
  );
};

export default AdminLayout;
Use code with caution.
Tsx
8. Admin Panel Sidebar (components/Layout/Sidebar.tsx)
import React, {useContext} from 'react';
import Link from 'next/link';
import { ThemeContext } from '../Global/ThemeContext';

const Sidebar: React.FC = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
    return (
      <div className={`w-64 bg-[var(--card-${theme})] p-4 border-r border-gray-200 dark:border-gray-700`}>
        <h2 className="text-2xl font-bold mb-6">Admin Panel</h2>
        <ul className="space-y-2">
          <li>
            <Link href="/admin" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                Dashboard
            </Link>
          </li>
            <li>
                <Link href="/admin?tab=products" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                    Products
                </Link>
            </li>
            <li>
                <Link href="/admin?tab=customers" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                    Customers
                </Link>
            </li>
            <li>
                <Link href="/admin?tab=logistics" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                    Logistics Partners
                </Link>
            </li>
          <li>
            <Link href="/admin?tab=orders" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
              Orders
            </Link>
          </li>
          <li>
            <Link href="/admin?tab=reports" className="block p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                Sales Reports
              </Link>
          </li>
        </ul>
        <div className="mt-6 border-t border-gray-300 dark:border-gray-600 pt-4">
        <button
            onClick={toggleTheme}
            className="w-full p-2 bg-gray-200 dark:bg-gray-700 rounded hover:bg-gray-300 dark:hover:bg-gray-600"
          >
           {theme === "light" ? "Dark Mode" : "Light Mode"}
          </button>
      </div>
      </div>
    );
  };

export default Sidebar;
Use code with caution.
Tsx
9. Theme Context (components/Global/ThemeContext.tsx)
import React, { createContext, useState, ReactNode } from 'react';

interface ThemeContextType {
    theme: 'light' | 'dark';
    toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType>({
    theme: 'light',
    toggleTheme: () => {}
});

interface ThemeProviderProps {
    children: ReactNode;
}

const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
    const [theme, setTheme] = useState<'light' | 'dark'>('light');

    const toggleTheme = () => {
      setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
    };
    return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
          {children}
        </ThemeContext.Provider>
      );
};

export { ThemeContext, ThemeProvider };
Use code with caution.
Tsx
10. Common Utilities (components/common.ts)
export const formatDate = (dateString:string) => {
  try {
    const date = new Date(dateString);
    const formatted = date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric'
      });
      return formatted;
  } catch (e) {
    return dateString;
  }
}
Use code with caution.
Ts
11. Admin Panel Page (pages/admin/index.tsx)
This page will use the different admin panels based on the tab query parameter from the url.

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import AdminLayout from '@/components/Layout/AdminLayout';
import Dashboard from '@/components/Dashboard/Dashboard';
import ProductsPanel from '@/components/Products/ProductsPanel';
import CustomersPanel from '@/components/Customers/CustomersPanel';
import LogisticsPanel from '@/components/LogisticsPartners/LogisticsPanel';
import OrdersPanel from '@/components/Orders/OrdersPanel';
import SalesReportsPanel from '@/components/SalesReports/SalesReportsPanel';
import { ThemeProvider } from '@/components/Global/ThemeContext';


const AdminPage: React.FC = () => {
  const router = useRouter();
  const { tab } = router.query;

  return (
   <ThemeProvider>
       <AdminLayout>
        {tab === "products" ? <ProductsPanel /> : null}
        {tab === "customers" ? <CustomersPanel /> : null}
        {tab === "logistics" ? <LogisticsPanel /> : null}
        {tab === "orders" ? <OrdersPanel /> : null}
        {tab === "reports" ? <SalesReportsPanel /> : null}
        {!tab ? <Dashboard /> : null}
       </AdminLayout>
   </ThemeProvider>
  );
};

export default AdminPage;
Use code with caution.
Tsx
12. Dashboard Panel (components/Dashboard/Dashboard.tsx)
import React from 'react';
import KeyMetricsCard from './KeyMetricsCard';
import RecentOrdersTable from './RecentOrdersTable';
import DashboardShortcuts from './DashboardShortcuts';
import useFetch from '@/hooks/useFetch';
import { Order, Product, Customer } from '@/types';

const Dashboard: React.FC = () => {
    const { data: orders, error: ordersError, loading: ordersLoading } = useFetch<Order[]>('/orders');
    const { data: products, error: productsError, loading: productsLoading } = useFetch<Product[]>('/products');
    const { data: customers, error: customersError, loading: customersLoading } = useFetch<Customer[]>('/customers');

    if (ordersLoading || productsLoading || customersLoading) {
        return <div>Loading...</div>;
    }

    if (ordersError || productsError || customersError) {
        return <div>Error loading data.</div>
    }

  const totalOrders = orders ? orders.length : 0;
  const totalProducts = products ? products.length : 0;
  const totalCustomers = customers ? customers.length : 0;
  const totalSales = orders?.reduce((acc, order) => acc + order.total_amount, 0) || 0;
  const recentOrders = orders?.slice(0, 5) || [];

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Dashboard</h2>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <KeyMetricsCard title="Total Products" value={totalProducts} />
        <KeyMetricsCard title="Total Customers" value={totalCustomers} />
        <KeyMetricsCard title="Total Orders" value={totalOrders} />
          <KeyMetricsCard title="Total Sales" value={totalSales} prefix="$" />
      </div>

      <div className="mb-6">
        <h3 className="text-xl font-semibold mb-2">Recent Orders</h3>
          <RecentOrdersTable orders={recentOrders} />
      </div>

      <div>
        <h3 className="text-xl font-semibold mb-2">Quick Actions</h3>
          <DashboardShortcuts />
      </div>
    </div>
  );
};

export default Dashboard;
Use code with caution.
Tsx
12.1. Dashboard Key Metrics (components/Dashboard/KeyMetricsCard.tsx)
import React from 'react';

interface KeyMetricsCardProps {
    title: string;
    value: number;
    prefix?: string;
    suffix?: string;
}

const KeyMetricsCard: React.FC<KeyMetricsCardProps> = ({ title, value, prefix, suffix }) => {
  return (
    <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <p className="text-3xl font-bold">{prefix}{value}{suffix}</p>
    </div>
  );
};

export default KeyMetricsCard;
Use code with caution.
Tsx
12.2. Dashboard Recent Orders (components/Dashboard/RecentOrdersTable.tsx)
import React from 'react';
import { Order } from '@/types';
import { formatDate } from '../common';

interface RecentOrdersTableProps {
  orders: Order[];
}

const RecentOrdersTable: React.FC<RecentOrdersTableProps> = ({ orders }) => {
  return (
    <div className="overflow-x-auto">
    <table className="min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded">
      <thead>
        <tr>
          <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Order ID</th>
          <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Date</th>
          <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Status</th>
          <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Total Amount</th>
        </tr>
      </thead>
      <tbody>
        {orders.map((order) => (
          <tr key={order.order_id} className="hover:bg-gray-100 dark:hover:bg-gray-700">
            <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{order.order_id}</td>
            <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{formatDate(order.created_at)}</td>
              <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{order.status}</td>
            <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">${order.total_amount}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
  );
};

export default RecentOrdersTable;
Use code with caution.
Tsx
12.3. Dashboard Shortcuts (components/Dashboard/DashboardShortcuts.tsx)
import React from 'react';
import { Button } from '../UI/Button';
import Link from 'next/link';

const DashboardShortcuts: React.FC = () => {
  return (
    <div className="space-x-4">
         <Link href="/admin?tab=products">
              <Button>Add Product</Button>
         </Link>
         <Link href="/admin?tab=orders">
              <Button>View Orders</Button>
         </Link>
         <Link href="/admin?tab=reports">
              <Button>Generate Reports</Button>
         </Link>
    </div>
  );
};

export default DashboardShortcuts;
Use code with caution.
Tsx
13. Products Panel (components/Products/ProductsPanel.tsx)
import React, { useState } from 'react';
import ProductTable from './ProductTable';
import AddEditProductModal from './AddEditProductModal';
import { Button } from '../UI/Button';
import { Product } from '@/types';
import ProductFilter from './ProductFilter';
import useFetch from '@/hooks/useFetch';

const ProductsPanel: React.FC = () => {
    const { data: products, error, loading, } = useFetch<Product[]>('/products')
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [filteredProducts, setFilteredProducts] = useState<Product[] | null>(null);

  const handleAddProduct = () => {
    setSelectedProduct(null);
    setIsModalOpen(true);
  };

    if(loading){
        return <div>Loading ...</div>
    }
    if(error){
        return <div>Error loading Products.</div>
    }


  const handleEditProduct = (product: Product) => {
    setSelectedProduct(product);
    setIsModalOpen(true);
  };
  const handleCloseModal = () => {
    setIsModalOpen(false);
  }

    const handleProductFilter = (filtered:Product[]|null) => {
       setFilteredProducts(filtered);
    }
  return (
    <div>
        <div className='flex justify-between items-center mb-4'>
            <h2 className="text-2xl font-bold mb-4">Products</h2>
           <Button onClick={handleAddProduct}>Add Product</Button>
        </div>

        <ProductFilter products={products} onFilter={handleProductFilter} />
        <ProductTable products={filteredProducts || products || []} onEdit={handleEditProduct}  />
      <AddEditProductModal isOpen={isModalOpen} onClose={handleCloseModal} product={selectedProduct} />
    </div>
  );
};

export default ProductsPanel;
Use code with caution.
Tsx
13.1. Product Table (components/Products/ProductTable.tsx)
import React from 'react';
import { Product } from '@/types';
import { Button } from '../UI/Button';
import { formatDate } from '../common';
interface ProductTableProps {
  products: Product[];
  onEdit: (product: Product) => void;
}

const ProductTable: React.FC<ProductTableProps> = ({ products, onEdit }) => {
  return (
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded">
            <thead>
            <tr>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">ID</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Name</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Category</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Price</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Stock</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Created At</th>
                <th className="py-2 px-4 border-b border-gray-200 dark:border-gray-700 text-left">Actions</th>
            </tr>
            </thead>
            <tbody>
            {products.map((product) => (
                <tr key={product.product_id} className="hover:bg-gray-100 dark:hover:bg-gray-700">
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{product.product_id}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{product.name}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{product.category}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">${product.price}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{product.stock_quantity}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">{formatDate(product.created_at)}</td>
                    <td className="py-2 px-4 border-b border-gray-200 dark:border-gray-700">
                      <Button size='sm' onClick={() => onEdit(product)}>Edit</Button>
                  </td>
                </tr>
            ))}
            </tbody>
        </table>
      </div>
  );
};

export default ProductTable;
Use code with caution.
Tsx
13.2. Product Filter (components/Products/ProductFilter.tsx)
import React, { useState, useEffect } from 'react';
import { Product } from '@/types';
import { Input } from '../UI/Input';
import { Option } from '@/types';
interface ProductFilterProps {
  products: Product[];
    onFilter: (filtered:Product[]|null) => void;
}
const ProductFilter: React.FC<ProductFilterProps> = ({ products, onFilter }) => {
    const [nameFilter, setNameFilter] = useState('');
    const [categoryFilter, setCategoryFilter] = useState('');
    const [categoryOptions, setCategoryOptions] = useState<Option[]>([]);
    useEffect(() => {
        if(products){
             const categories = [...new Set(products.map(product => product.category))];
            setCategoryOptions(categories.map(category => ({label: category, value: category})));
        }
    }, [products])

    useEffect(() => {
        if (products){
            let filtered = products;
             if (nameFilter) {
                filtered = filtered.filter(product => product.name.toLowerCase().includes(nameFilter.toLowerCase()));
            }
             if(categoryFilter){
                filtered = filtered.filter(product => product.category === categoryFilter);
             }
             onFilter(filtered.length > 0 ? filtered : null);
        } else {
            onFilter(null);
        }

    }, [nameFilter, categoryFilter, products, onFilter]);

    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setNameFilter(e.target.value);
    };
    const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setCategoryFilter(e.target.value);
    }


  return (
    <div className="flex flex-wrap gap-4 mb-4">
          <div className="flex-1">
            <Input type="text" placeholder="Filter by name" value={nameFilter} onChange={handleNameChange} />
          </div>
        <div className="flex-1">
              <select className='border rounded p-2 w-full bg-[var(--card-light)] text-[var(--text-light)] dark:bg-[var(--card-dark)] dark:text-[var(--text-dark)]'
                  value={categoryFilter} onChange={handleCategoryChange}
               >
                <option value="">Filter by Category</option>
                  {categoryOptions?.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
              </select>
        </div>
    </div>
  );
};

export default ProductFilter;
Use code with caution.
Tsx
13.3. Add/Edit Product Modal (components/Products/AddEditProductModal.tsx)
import React, { useState, useEffect } from 'react';
import { Modal } from '../UI/Modal';
import { Input } from '../UI/Input';
import { Button } from '../UI/Button';
import { Product } from '@/types';
import apiFetch from '@/utils/api';

interface AddEditProductModalProps {
  isOpen: boolean;
  onClose: () => void;
  product: Product | null;
}

const AddEditProductModal: React.FC<AddEditProductModalProps> = ({ isOpen, onClose, product }) => {
  const [name, setName] = useState('');
  const [category, setCategory] = useState('');
  const [price, setPrice] = useState('');
  const [stockQuantity, setStockQuantity] = useState('');
  const [description, setDescription] = useState('');
  const [isEdit, setIsEdit] = useState(false);

  useEffect(() => {
      if (product) {
        setIsEdit(true);
        setName(product.name);
        setCategory(product.category);
        setPrice(product.price.toString());
          setStockQuantity(product.stock_quantity.toString());
        setDescription(product.description);
      } else {
        setIsEdit(false);
        setName('');
          setCategory('');
          setPrice('');
        setStockQuantity('');
          setDescription('');
      }
  }, [product]);
  const handleSubmit = async (event: React.FormEvent) => {
      event.preventDefault();
      const productData = {
          name: name,
          category: category,
          price: parseFloat(price),
          stock_quantity: parseInt(stockQuantity),
          description: description
      }
      try {
            if(isEdit && product){
              await apiFetch(`/products/${product.product_id}`, { method: 'PUT', body:productData})
              alert('Product updated successfully!');
          } else {
            await apiFetch('/products', { method: 'POST', body: productData })
              alert('Product added successfully!');
          }
        onClose();
      } catch (error:any){
          alert(error.message || 'Error saving product');
      }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={isEdit ? 'Edit Product' : 'Add Product'}>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <Input type="text" placeholder="Name" value={name} onChange={(e) => setName(e.target.value)} required />
        </div>
          <div>
              <Input type="text" placeholder="Category" value={category} onChange={(e) => setCategory(e.target.value)} required />
          </div>
        <div>
          <Input type="number" placeholder="Price" value={price} onChange={(e) => setPrice(e.target.value)} required />
        </div>
          <div>
              <Input type="number" placeholder="Stock Quantity" value={stockQuantity} onChange={(e) => setStockQuantity(e.target.value)} required />
          </div>
        <div>
          <Input type="text" placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)} />
        </div>
        <div className="flex justify-end">
          <Button type="submit">{isEdit ? 'Update Product' : 'Add Product'}</Button>
        </div>
      </form>
    </Modal>
  );
};

export default AddEditProductModal;


